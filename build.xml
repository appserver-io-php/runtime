<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-php/runtime" default="build" basedir=".">

    <!-- ==================================================================== -->
    <!-- Load the environment variables into our properties                   -->
    <!-- ==================================================================== -->
    <property environment="env" />
    
    <!-- ==================================================================== -->
    <!-- Generate a time stamp for further use in build targets               -->
    <!-- ==================================================================== --> 
    <tstamp>
        <format property="time.stamp" pattern="yyyy-MM-dd_HHmmss"/>
    </tstamp>

    <!-- ==================================================================== -->
    <!-- Load all property files in the right order                           -->
    <!-- ==================================================================== -->
    <property file="${basedir}/build.properties"/>
    <property file="${user.home}/build.properties"/>
    <property file="${basedir}/build.default.properties"/>
    <property file="${basedir}/build.${os.family}.${os.distribution}.properties"/>
    <property file="${basedir}/build.${os.family}.properties"/>

    <!-- ==================================================================== -->
    <!-- Create some basic properties which we need for further processing    -->
    <!-- The property hub.scp-user is missing on purpose and has to be        -->
    <!-- provided within the build environment                                -->
    <!-- ==================================================================== -->
    <property name="lib.dir" value="${basedir}/lib" />
    <property name="hub.address" value="appserver.io"/>
    <property name="custom-lib.dir" value="${basedir}/custom-lib" />
    <property name="php-src.dir" value="${basedir}/src" />
    <property name="php-test.dir" value="${basedir}/tests" />
    <property name="php-target.dir" value="${basedir}/target"/>
    <property name="hub.snapshot-path" value="/var/www/builds.appserver.io/${os.qualified.path}"/>

    <!-- ==================================================================== -->
    <!-- Create properties which need other properties coming from different  -->
    <!-- files as we had problems defining it within properties files         -->
    <!-- CAUTION, THIS SYNTAX IS DOUBLED IN THE rpmbuild SPECS FILE!          -->
    <!-- ==================================================================== -->
    <property name="package.name" value="appserver-${appserver.version}-${appserver.version.suffix}${build.number}.${os.qualified.name}.${os.architecture}.${os.package-extension}"/>
    <property name="package.specific-dir" value="${php-target.dir}/"/>

    <!-- ==================================================================== -->
    <!-- Cleans the directories with the generated source files               -->
    <!-- ==================================================================== -->
    <target name="clean" description="Cleans build directory in preparation for new build.">
        <delete dir="${php-target.dir}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares all the required directories                                -->
    <!-- ==================================================================== -->
    <target name="prepare" depends="clean" description="Prepares all the required directories.">
        <mkdir dir="${php-target.dir}" />
        <mkdir dir="${lib.dir}" />
        <mkdir dir="${custom-lib.dir}" />
    </target>
	
    <!-- ==================================================================== -->
    <!-- Copies the sources to the temporary directory                        -->
    <!-- ==================================================================== -->
    <target name="copy" depends="prepare" description="Copies the sources to the target directory.">
        <copy todir="${php-target.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="**/*" />
                <exclude name="etc/**/*"/>
            </fileset>
        </copy>
        <copy todir="${php-target.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="etc/**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>
    
    <!-- ==================================================================== -->
    <!-- Copies the sources to the deploy directory                           -->
    <!-- ==================================================================== -->
    <target name="deploy" depends="copy" description="Copies the sources to the deploy directory.">
    	<!-- validate the schema against the configuration file -->
        <schemavalidate file="${php-target.dir}/etc/appserver/appserver.xml" failonerror="true">
            <schema namespace="http://www.appserver.io/appserver" file="${php-target.dir}/app/resources/schema/appserver.xsd" />
        </schemavalidate>
        <!-- copies the files to the installation directory -->
        <copy todir="${dir.www}/${deploy.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-target.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>
    
    <!-- ==================================================================== -->
    <!-- Builds the runtime                                                   -->
    <!-- ==================================================================== -->
    <target name="build" description="Runs the PHPUnit tests and generates a report.">
        <antcall target="install-composer"/>
        <antcall target="run-integration-tests"/>
    </target>
	
    <!-- ==================================================================== -->
    <!-- Copies any built package to the snapshot hosting server.             -->
    <!-- ==================================================================== -->
    <target name="copy-to-hub-windows" description="Copies any built package to the snapshot hosting server.">
    	<echo message="Now try to upload ${package.specific-dir}${package.name} to snapshot server"/>
    	<scp file="${package.specific-dir}${package.name}" todir="${hub.scp-user}@${hub.address}:${hub.snapshot-path}" keyfile="${user.home}/.ssh/id_rsa" />
    </target>

    <!-- ==================================================================== -->
    <!-- Copies any built package to the snapshot hosting server.             -->
    <!-- ==================================================================== -->
    <target name="copy-to-hub" description="Copies any built package to the snapshot hosting server.">
    	<echo message="Now try to upload ${package.specific-dir}${package.name} to snapshot server"/>
    	<exec executable="scp" failonerror="true">
            <arg line="-o StrictHostKeyChecking=no -i ${user.home}/.ssh/id_rsa ${package.specific-dir}${package.name} ${hub.scp-user}@${hub.address}:${hub.snapshot-path}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PHP source package has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-php-src-present" description="Check if PHP Source Package has been downloaded yet.">
        <available file="${lib.dir}/php-${appserver.php.version}.tar.gz" property="php-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL memcached sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-memcached-src-present" description="Check if PECL memcached sources has been downloaded yet.">
        <available file="${lib.dir}/memcached-${appserver.memcached.version}.tgz" property="memcached-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL pthreads sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-pthreads-src-present" description="Check if PECL pthreads sources has been downloaded yet.">
        <available file="${lib.dir}/pthreads-${appserver.pthreads.version}.tgz" property="pthreads-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL apcu sources has been downloaded yet               -->
    <!-- ==================================================================== -->
    <target name="check-apcu-src-present" description="Check if PECL apcu sources has been downloaded yet.">
        <available file="${lib.dir}/apcu-${appserver.apcu.version}.tgz" property="apcu-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL redis sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-redis-src-present" description="Check if PECL redis sources has been downloaded yet.">
        <available file="${lib.dir}/redis-${appserver.redis.version}.tgz" property="redis-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL xdebug sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-xdebug-src-present" description="Check if PECL xdebug sources has been downloaded yet.">
        <available file="${lib.dir}/xdebug-${appserver.xdebug.version}.tgz" property="xdebug-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL libevent sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-libevent-src-present" description="Check if PECL libevent sources has been downloaded yet.">
        <available file="${lib.dir}/libevent-${appserver.libevent.version}.tgz" property="libevent-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL libev sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libev-src-present" description="Check if PECL libev sources has been downloaded yet.">
        <available file="${lib.dir}/libev-${appserver.libev.version}.zip" property="libev-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL ev sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-ev-src-present" description="Check if PECL ev sources has been downloaded yet.">
        <available file="${lib.dir}/ev-${appserver.ev.version}.zip" property="ev-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL event sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-event-src-present" description="Check if PECL event sources has been downloaded yet.">
        <available file="${lib.dir}/event-${appserver.event.version}.zip" property="event-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL operator sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-operator-src-present" description="Check if PECL operator sources has been downloaded yet.">
        <available file="${lib.dir}/operator-${appserver.operator.version}.tgz" property="operator-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL pecl_http sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-pecl_http-src-present" description="Check if PECL pecl_http sources has been downloaded yet.">
        <available file="${lib.dir}/pecl_http-${appserver.pecl_http.version}.tgz" property="pecl_http-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if ext-appserver sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-ext-appserver-src-present" description="Check if ext appserver sources has been downloaded yet.">
        <available file="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" property="ext-appserver-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL AOP sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-AOP-src-present" description="Check if PECL AOP sources has been downloaded yet.">
        <available file="${lib.dir}/AOP-${appserver.AOP.version}.tgz" property="AOP-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libfreetype sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-libfreetype-src-present" description="Check if libfreetype sources has been downloaded yet.">
        <available file="${lib.dir}/freetype-${libfreetype.version}.tgz" property="libfreetype-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libmemcached sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-libmemcached-src-present" description="Check if libmemcached sources has been downloaded yet.">
        <available file="${lib.dir}/libmemcached-${libmemcached.version}.tgz" property="libmemcached-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libmcrypt sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libmcrypt-src-present" description="Check if libmcrypt sources has been downloaded yet.">
        <available file="${lib.dir}/libmcrypt-${libmcrypt.version}.tgz" property="libmcrypt-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if readline sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-readline-src-present" description="Check if readline sources has been downloaded yet.">
        <available file="${lib.dir}/readline-${readline.version}.tar.gz" property="readline-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libpng sources has been downloaded yet   		 	          -->
    <!-- ==================================================================== -->
    <target name="check-libpng-src-present" description="Check if libpng sources has been downloaded yet.">
        <available file="${lib.dir}/libpng-${libpng.version}.tgz" property="libpng-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libjpeg sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libjpeg-src-present" description="Check if libjpeg sources has been downloaded yet.">
        <available file="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz" property="libjpeg-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if pcre sources has been downloaded yet   		 	          -->
    <!-- ==================================================================== -->
    <target name="check-pcre-src-present" description="Check if pcre sources has been downloaded yet.">
        <available file="${lib.dir}/pcre-${pcre.version}.tar.gz" property="pcre-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libevent library sources has been downloaded yet   		  -->
    <!-- ==================================================================== -->
    <target name="check-libevent-library-src-present" description="Check if libevent library sources has been downloaded yet.">
        <available file="${lib.dir}/libevent-${libevent.version}.tar.gz" property="libevent-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if openssl sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-openssl-src-present" description="Check if openssl sources has been downloaded yet.">
        <available file="${lib.dir}/openssl-${openssl.version}.tar.gz" property="openssl-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if icu4c sources has been downloaded yet   		 	          -->
    <!-- ==================================================================== -->
    <target name="check-libicu-src-present" description="Check if icu4c sources has been downloaded yet.">
        <available file="${lib.dir}/icu4c-${libicu.version.major}_${libicu.version.minor}-src.tgz" property="libicu-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get the latest versions of the default webapps                       -->
    <!-- ==================================================================== -->
    <target name="get-default-webapps" depends="prepare" description="Get the latest versions of the default webapps">
        <!--
    	<get src="${webapps.download.baseurl}${webapps.name.admin}/${webapps.name.admin}-${webapps.version.admin}.phar" dest="${basedir}/webapps/${webapps.name.admin}.phar" usetimestamp="true"/>
        <get src="${webapps.download.baseurl}${webapps.name.api}/${webapps.name.api}-${webapps.version.api}.phar" dest="${basedir}/webapps/${webapps.name.api}.phar" usetimestamp="true"/>
        -->
        <get src="${webapps.download.baseurl}${webapps.name.example}/${webapps.name.example}-${webapps.version.example}.phar" dest="${basedir}/webapps/${webapps.name.example}.phar" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PHP source package by given version number		  		          -->
    <!-- ==================================================================== -->
    <target name="get-php-src" depends="check-php-src-present,prepare" unless="php-src.present" description="Get PHP source package by given version number">
        <get src="http://de1.php.net/get/php-${appserver.php.version}.tar.gz/from/this/mirror" dest="${lib.dir}/php-${appserver.php.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL memcached source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-memcached-src" depends="check-memcached-src-present" unless="memcached-src.present" description="Get PECL memcached source package by given version number">
        <get src="http://pecl.php.net/get/memcached-${appserver.memcached.version}.tgz" dest="${lib.dir}/memcached-${appserver.memcached.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL pthreads source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-pthreads-src" depends="check-pthreads-src-present" unless="pthreads-src.present" description="Get PECL pthreads source package by given version number">
        <get src="https://github.com/appserver-io/pthreads/archive/v${appserver.pthreads.version}.tar.gz" dest="${lib.dir}/pthreads-${appserver.pthreads.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL apcu source package by given version number                 -->
    <!-- ==================================================================== -->
    <target name="get-apcu-src" depends="check-apcu-src-present" unless="apcu-src.present" description="Get PECL apcu source package by given version number">
        <get src="http://pecl.php.net/get/apcu-${appserver.apcu.version}.tgz" dest="${lib.dir}/apcu-${appserver.apcu.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL redis source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-redis-src" depends="check-redis-src-present" unless="redis-src.present" description="Get PECL redis source package by given version number">
        <get src="http://pecl.php.net/get/redis-${appserver.redis.version}.tgz" dest="${lib.dir}/redis-${appserver.redis.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL libevent source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-libevent-src" depends="check-libevent-src-present" unless="libevent-src.present" description="Get PECL libevent source package by given version number">
        <get src="http://pecl.php.net/get/libevent-${appserver.libevent.version}.tgz" dest="${lib.dir}/libevent-${appserver.libevent.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL ev source package by given version number		              -->
    <!-- ==================================================================== -->
    <target name="get-ev-src" depends="check-ev-src-present" unless="ev-src.present" description="Get PECL ev source package by given version number">
        <get src="http://pecl.php.net/get/ev-${appserver.ev.version}.tgz" dest="${lib.dir}/ev-${appserver.ev.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL event source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-event-src" depends="check-event-src-present" unless="event-src.present" description="Get PECL event source package by given version number">
        <get src="http://pecl.php.net/get/event-${appserver.event.version}.tgz" dest="${lib.dir}/event-${appserver.event.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL libev source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-libev-src" depends="check-libev-src-present" unless="libev-src.present" description="Get PECL libev source package by given version number">
        <get src="https://github.com/whatthejeff/php-libev/archive/${appserver.libev.version}.zip" dest="${lib.dir}/libev-${appserver.libev.version}.zip" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL operator source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-operator-src" depends="check-operator-src-present" unless="operator-src.present" description="Get PECL operator source package by given version number">
        <get src="http://pecl.php.net/get/operator-${appserver.operator.version}.tgz" dest="${lib.dir}/operator-${appserver.operator.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL pecl_http source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-pecl_http-src" depends="check-pecl_http-src-present" unless="pecl_http-src.present" description="Get PECL pecl_http source package by given version number">
        <get src="http://pecl.php.net/get/pecl_http-${appserver.pecl_http.version}.tgz" dest="${lib.dir}/pecl_http-${appserver.pecl_http.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL AOP source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-AOP-src" depends="check-AOP-src-present" unless="AOP-src.present" description="Get PECL AOP source package by given version number">
        <get src="http://pecl.php.net/get/AOP-${appserver.AOP.version}.tgz" dest="${lib.dir}/AOP-${appserver.AOP.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL xdebug source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-xdebug-src" depends="check-xdebug-src-present" unless="xdebug-src.present" description="Get PECL xdebug source package by given version number">
        <get src="http://pecl.php.net/get/xdebug-${appserver.xdebug.version}.tgz" dest="${lib.dir}/xdebug-${appserver.xdebug.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL appserver source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-ext-appserver-src" depends="check-ext-appserver-src-present" unless="ext-appserver-src.present" description="Get php ext appserver source package by given version number">
        <get src="https://github.com/appserver-io-php/php-ext-appserver/releases/download/v${appserver.ext-appserver.version}-beta/appserver-${appserver.ext-appserver.version}.tgz" dest="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libfreetype source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libfreetype-src" depends="check-libfreetype-src-present" unless="libfreetype-src.present" description="Get libfreetype source package by given version number.">
        <get src="${libfreetype.download.url}" dest="${lib.dir}/freetype-${libfreetype.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libmemcached source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-libmemcached-src" depends="check-libmemcached-src-present" unless="libmemcached-src.present" description="Get libmemcached source package by given version number.">
        <get src="${libmemcached.download.url}" dest="${lib.dir}/libmemcached-${libmemcached.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libmcrypt source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libmcrypt-src" depends="check-libmcrypt-src-present" unless="libmcrypt-src.present" description="Get libmcrypt source package by given version number.">
        <get src="${libmcrypt.download.url}" dest="${lib.dir}/libmcrypt-${libmcrypt.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get readline source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-readline-src" depends="check-readline-src-present" unless="readline-src.present" description="Get readline source package by given version number.">
        <get src="${readline.download.url}" dest="${lib.dir}/readline-${readline.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libpng source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libpng-src" depends="check-libpng-src-present" unless="libpng-src.present" description="Get libpng source package by given version number.">
        <get src="${libpng.download.url}" dest="${lib.dir}/libpng-${libpng.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libjpeg source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libjpeg-src" depends="check-libjpeg-src-present" unless="libjpeg-src.present" description="Get libjpeg source package by given version number.">
        <get src="${libjpeg.download.url}" dest="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libevent source package by given version number		  -->
    <!-- ==================================================================== -->
    <target name="get-libevent-library-src" depends="check-libevent-library-src-present" unless="libevent-library-src.present" description="Get libevent source package by given version number.">
        <get src="${libevent.download.url}" dest="${lib.dir}/libevent-${libevent.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get pcre source package by given version number		              -->
    <!-- ==================================================================== -->
    <target name="get-pcre-src" depends="check-pcre-src-present" unless="pcre-src.present" description="Get pcre source package by given version number.">
        <get src="${pcre.download.url}" dest="${lib.dir}/pcre-${pcre.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get openssl source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-openssl-src" depends="check-openssl-src-present" unless="openssl-src.present" description="Get openssl source package by given version number.">
        <get src="${openssl.download.url}" dest="${lib.dir}/openssl-${openssl.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get icu4c source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libicu-src" depends="check-libicu-src-present" unless="libicu-src.present" description="Get icu4c source package by given version number.">
        <get src="${libicu.download.url}" dest="${lib.dir}/icu4c-${libicu.version.major}_${libicu.version.minor}-src.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PHP sources for the runtime                             -->
    <!-- ==================================================================== -->
    <target name="prepare-source" depends="prepare" description="Prepares the PHP sources for the runtime.">
        <!-- prepare PHP sources -->
        <antcall target="get-php-src"/>
        <untar src="${lib.dir}/php-${appserver.php.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${php-target.dir}/php-${appserver.php.version}/build" includes="**/*"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PECL sources for static compilation (not active!!)      -->
    <!-- ==================================================================== -->
    <target name="prepare-pecl-extension" description="Prepares the PECL sources for static compilation (not active!!)">
        <!-- prepare php ext appserver sources sources for static compilation -->
        <antcall target="get-ext-appserver-src"/>
        <untar src="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/appserver">
            <fileset dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}"/>
        </move>
        <!-- prepare PECL memcached sources sources for static compilation -->
        <antcall target="get-memcached-src"/>
        <untar src="${lib.dir}/memcached-${appserver.memcached.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/memcached">
            <fileset dir="${php-target.dir}/memcached-${appserver.memcached.version}"/>
        </move>
        <!-- prepare PECL pthread sources for static compilation -->
        <antcall target="get-pthreads-src"/>
        <untar src="${lib.dir}/pthreads-${appserver.pthreads.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/pthreads">
            <fileset dir="${php-target.dir}/pthreads-${appserver.pthreads.version}"/>
        </move>
        <!-- prepare PECL apcu sources for static compilation -->
        <antcall target="get-apcu-src"/>
        <untar src="${lib.dir}/apcu-${appserver.apcu.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/apcu">
            <fileset dir="${php-target.dir}/apcu-${appserver.apcu.version}"/>
        </move>
        <!-- prepare PECL operator sources for static compilation -->
        <antcall target="get-operator-src"/>
        <untar src="${lib.dir}/operator-${appserver.operator.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/operator">
            <fileset dir="${php-target.dir}/operator-${appserver.operator.version}"/>
        </move>
        <!-- prepare PECL pecl_http sources for static compilation -->
        <antcall target="get-pecl_http-src"/>
        <untar src="${lib.dir}/pecl_http-${appserver.pecl_http.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/http">
            <fileset dir="${php-target.dir}/pecl_http-${appserver.pecl_http.version}"/>
        </move>
        <!-- prepare PECL AOP sources for static compilation -->
        <antcall target="get-AOP-src"/>
        <untar src="${lib.dir}/AOP-${appserver.AOP.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/AOP">
            <fileset dir="${php-target.dir}/AOP-${appserver.AOP.version}"/>
        </move>
        <!-- prepare PECL libevent sources for static compilation -->
        <antcall target="get-libevent-src"/>
        <untar src="${lib.dir}/libevent-${appserver.libevent.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/libevent">
            <fileset dir="${php-target.dir}/libevent-${appserver.libevent.version}"/>
        </move>
        <!-- prepare PECL redis sources for static compilation -->
        <antcall target="get-redis-src"/>
        <untar src="${lib.dir}/redis-${appserver.redis.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <move todir="${php-target.dir}/php-${appserver.php.version}/ext/redis">
            <fileset dir="${php-target.dir}/redis-${appserver.redis.version}"/>
        </move>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libjpeg sources for the runtime                         -->
    <!-- ==================================================================== -->
    <target name="build-libjpeg" if="${libjpeg.build}" description="Prepares the libjpeg sources for the runtime.">
        <antcall target="get-libjpeg-src"/>
        <untar src="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/jpeg-${libjpeg.version}" executable="sh">
            <env key="CC" value="${libjpeg.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/jpeg-${libjpeg.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/jpeg-${libjpeg.version}" executable="make"/>
        <exec dir="${php-target.dir}/jpeg-${libjpeg.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libpng sources for the runtime                          -->
    <!-- ==================================================================== -->
    <target name="build-libpng" if="${libpng.build}" description="Prepares the libpng sources for the runtime.">
        <antcall target="get-libpng-src"/>
        <untar src="${lib.dir}/libpng-${libpng.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/libpng-${libpng.version}" executable="sh">
            <env key="CC" value="${libpng.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/libpng-${libpng.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/libpng-${libpng.version}" executable="make"/>
        <exec dir="${php-target.dir}/libpng-${libpng.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libfreetype sources for the runtime                     -->
    <!-- ==================================================================== -->
    <target name="build-libfreetype" if="${libfreetype.build}" description="Prepares the libfreetype sources for the runtime.">
        <antcall target="get-libfreetype-src"/>
        <untar src="${lib.dir}/freetype-${libfreetype.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${php-target.dir}/freetype-${libfreetype.version}/builds" includes="**/*"/>
        <exec dir="${php-target.dir}/freetype-${libfreetype.version}" executable="sh">
            <env key="CC" value="${libfreetype.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <exec dir="${php-target.dir}/freetype-${libfreetype.version}" executable="make"/>
        <exec dir="${php-target.dir}/freetype-${libfreetype.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libmemcached sources for the runtime                    -->
    <!-- ==================================================================== -->
    <target name="build-libmemcached" if="${libmemcached.build}" description="Prepares the libmemcached sources for the runtime.">
        <antcall target="get-libmemcached-src"/>
        <untar src="${lib.dir}/libmemcached-${libmemcached.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${php-target.dir}/libmemcached-${libmemcached.version}/build-aux" includes="**/*"/>
        <exec dir="${php-target.dir}/libmemcached-${libmemcached.version}" executable="sh">
            <env key="CC" value="${libmemcached.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <exec dir="${php-target.dir}/libmemcached-${libmemcached.version}" executable="make"/>
        <exec dir="${php-target.dir}/libmemcached-${libmemcached.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libmcrypt sources for the runtime                       -->
    <!-- ==================================================================== -->
    <target name="build-libmcrypt" if="${libmcrypt.build}" description="Prepares the libmcrypt sources for the runtime.">
        <antcall target="get-libmcrypt-src"/>
        <untar src="${lib.dir}/libmcrypt-${libmcrypt.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" executable="sh">
            <env key="CC" value="${libmcrypt.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" includes="install-sh"/>
        <exec dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" executable="make"/>
        <exec dir="${php-target.dir}/libmcrypt-${libmcrypt.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the readline sources for the runtime                       -->
    <!-- ==================================================================== -->
    <target name="build-readline" if="${readline.build}" description="Prepares the readline sources for the runtime.">
    	<antcall target="get-readline-src"/>
        <untar src="${lib.dir}/readline-${readline.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/readline-${readline.version}" executable="sh">
            <env key="CC" value="${readline.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
    	<!-- BUGFIX: http://techdebug.com/blog/2009/01/03/compiling-readline-on-an-osx-105-intel-x86_64/ -->
    	<replace file="${php-target.dir}/readline-${readline.version}/shlib/Makefile" token="-dynamic" value="-dynamiclib"/>
        <exec dir="${php-target.dir}/readline-${readline.version}" executable="make"/>
        <exec dir="${php-target.dir}/readline-${readline.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libevent sources for the runtime                -->
    <!-- ==================================================================== -->
    <target name="build-libevent" if="${libevent.build}" description="Prepares the libevent sources for the runtime.">
        <antcall target="get-libevent-library-src"/>
        <untar src="${lib.dir}/libevent-${libevent.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/libevent-${libevent.version}-stable" executable="sh">
            <env key="CC" value="${libevent.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/libevent-${libevent.version}-stable" includes="install-sh"/>
        <exec dir="${php-target.dir}/libevent-${libevent.version}-stable" executable="make"/>
        <exec dir="${php-target.dir}/libevent-${libevent.version}-stable" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the pcre sources for the runtime                            -->
    <!-- ==================================================================== -->
    <target name="build-pcre" if="${pcre.build}" description="Prepares the pcre sources for the runtime.">
        <antcall target="get-pcre-src"/>
        <untar src="${lib.dir}/pcre-${pcre.version}.tar.gz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/pcre-${pcre.version}" executable="sh">
            <env key="CC" value="${pcre.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${php-target.dir}/pcre-${pcre.version}" includes="install-sh"/>
        <chmod perm="755" dir="${php-target.dir}/pcre-${pcre.version}" includes="configure"/>
        <exec dir="${php-target.dir}/pcre-${pcre.version}" executable="make"/>
        <exec dir="${php-target.dir}/pcre-${pcre.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the openssl sources for the runtime                		  -->
    <!-- ==================================================================== -->
    <target name="build-openssl" if="${openssl.build}" description="Prepares the openssl sources for the runtime.">
    	<antcall target="get-openssl-src"/>

    	<copy file="${basedir}/scripts/build_openssl_dylib_${os.architecture}.sh" todir="${php-target.dir}">
            <filterchain>
                <expandproperties/>
            </filterchain>
    	</copy>
        <chmod perm="755" file="${php-target.dir}/build_openssl_dylib_${os.architecture}.sh" />
    	<exec dir="${php-target.dir}" executable="sh">
    		<arg value="build_openssl_dylib_${os.architecture}.sh" />
    	</exec>

    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libicu sources for the runtime                          -->
    <!-- ==================================================================== -->
    <target name="build-libicu" if="${libicu.build}" description="Prepares the libicu sources for the runtime.">
        <antcall target="get-libicu-src"/>
        <untar src="${lib.dir}/icu4c-${libicu.version.major}_${libicu.version.minor}-src.tgz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${php-target.dir}/icu/source" includes="configure,install-sh"/>
        <exec dir="${php-target.dir}/icu/source" executable="sh">
            <arg value="runConfigureICU"/>
            <arg value="${libicu.target-env}"/>
            <arg value="--prefix=${appserver.compile.prefix}"/>
        </exec>
        <exec dir="${php-target.dir}/icu/source" executable="make"/>
        <exec dir="${php-target.dir}/icu/source" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the PHP Application Server runtime sources                    -->
    <!-- ==================================================================== -->
    <target name="copy-runtime" description="Copies the PHP Application Server runtime sources.">
        <!-- copy the sources including xml configuration/schema to installation directory -->
    	<copy todir="${appserver.compile.prefix}" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    	<!-- validate the appserver.xml file against the schema definition -->
    	<!-- schemavalidate file="${appserver.compile.prefix}/etc/appserver/appserver.xml" failonerror="true">
    		<schema namespace="http://www.appserver.io/appserver" file="${appserver.compile.prefix}/app/resources/schema/appserver.xsd" />
     	</schemavalidate -->
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PHP source for the PHP Application Server runtime         -->
    <!-- ==================================================================== -->
    <target name="build-runtime" depends="prepare-source" description="Compiles the ApplicationServer runtime environment.">

        <!-- delete the application server directory -->
        <delete dir="${appserver.compile.prefix}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>

        <!-- prepare the distribution build system (use the wrapper task to do so) -->
        <antcall target="prepare-${os.distribution}-build-system"/>

        <!-- build the necessary libraries -->
    	<antcall target="build-libjpeg"/>
        <antcall target="build-libpng"/>
        <antcall target="build-libfreetype"/>
        <antcall target="build-libmemcached"/>
        <antcall target="build-libmcrypt"/>
        <antcall target="build-readline"/>
        <antcall target="build-libevent"/>
        <antcall target="build-openssl"/>
        <antcall target="build-pcre"/>
        <antcall target="build-libicu"/>

    	<!-- prepare the PECL extensions -->
        <antcall target="prepare-pecl-extension"/>

        <!-- compile the PHP sources and PECL extensions static -->
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="make">
            <arg value="clean"/>
        </exec>
        <delete file="${php-target.dir}/php-${appserver.php.version}/aclocal.m4"/>
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="sh">
            <arg value="buildconf"/>
            <arg line="--force"/>
        </exec>

    	<!-- log PHP compile configuration -->
    	<echo message="Now compiling PHP using configure params: ${appserver.compile.configuration}"/>

    	<!-- configure, compile and install PHP binary -->
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="sh">
            <env key="CC" value="${appserver.cc}"/>
            <env key="EXTRA_LIBS" value="-llber"/>
            <arg line="configure ${appserver.compile.configuration}"/>
        </exec>
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="make">
            <arg value="-j8"/>
        </exec>
        <exec dir="${php-target.dir}/php-${appserver.php.version}" executable="make">
            <arg value="install"/>
        </exec>

        <!-- build the PECL package's as shared library -->
        <antcall target="pecl-build-pthreads"/>
        <antcall target="pecl-build-memcached"/>
        <antcall target="pecl-build-redis"/>
        <antcall target="pecl-build-appserver"/>
        <antcall target="pecl-build-apcu"/>
        <antcall target="pecl-build-ev"/>
        <antcall target="pecl-build-event"/>
        <antcall target="pecl-build-xdebug"/>

    	<!-- copy runtime files from src directory -->
        <antcall target="copy-runtime"/>
    	
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL pthreads as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-pthreads" description="Builds the PECL pthreads as shared extension.">
        <antcall target="get-pthreads-src"/>
        <untar src="${lib.dir}/pthreads-${appserver.pthreads.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/pthreads-${appserver.pthreads.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/pthreads-${appserver.pthreads.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/pthreads-${appserver.pthreads.version}" executable="make"/>
        <exec dir="${php-target.dir}/pthreads-${appserver.pthreads.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL apcu as shared extension                             -->
    <!-- ==================================================================== -->
    <target name="pecl-build-apcu" description="Builds the PECL apcu as shared extension.">
        <antcall target="get-apcu-src"/>
        <untar src="${lib.dir}/apcu-${appserver.apcu.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="make"/>
        <exec dir="${php-target.dir}/apcu-${appserver.apcu.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL memcached as shared extension                        -->
    <!-- ==================================================================== -->
    <target name="pecl-build-memcached" description="Builds the PECL memcached as shared extension.">
        <antcall target="get-memcached-src"/>
        <untar src="${lib.dir}/memcached-${appserver.memcached.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/memcached-${appserver.memcached.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/memcached-${appserver.memcached.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
            <arg value="--with-libmemcached-dir=${libmemcached.dir}"/>
        </exec>
        <exec dir="${php-target.dir}/memcached-${appserver.memcached.version}" executable="make"/>
        <exec dir="${php-target.dir}/memcached-${appserver.memcached.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL operator as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-operator" description="Builds the PECL operator as shared extension.">
        <antcall target="get-operator-src"/>
        <untar src="${lib.dir}/operator-${appserver.operator.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/operator-${appserver.operator.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/operator-${appserver.operator.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/operator-${appserver.operator.version}" executable="make"/>
        <exec dir="${php-target.dir}/operator-${appserver.operator.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL pecl_http as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-pecl_http" description="Builds the PECL pecl_http as shared extension.">
        <antcall target="get-pecl_http-src"/>
        <untar src="${lib.dir}/pecl_http-${appserver.pecl_http.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/pecl_http-${appserver.pecl_http.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/pecl_http-${appserver.pecl_http.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/pecl_http-${appserver.pecl_http.version}" executable="make"/>
        <exec dir="${php-target.dir}/pecl_http-${appserver.pecl_http.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL libevent as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-libevent" description="Builds the PECL libevent as shared extension.">
        <antcall target="get-libevent-src"/>
        <untar src="${lib.dir}/libevent-${appserver.libevent.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/libevent-${appserver.libevent.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/libevent-${appserver.libevent.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
            <arg value="--with-libevent=${appserver.compile.libevent.libdir}"/>
        </exec>
        <exec dir="${php-target.dir}/libevent-${appserver.libevent.version}" executable="make"/>
        <exec dir="${php-target.dir}/libevent-${appserver.libevent.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL libev as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-libev" description="Builds the PECL libev as shared extension.">
        <antcall target="get-libev-src"/>
        <unzip src="${lib.dir}/libev-${appserver.libev.version}.zip" dest="${php-target.dir}"/>
        <exec dir="${php-target.dir}/php-libev-${appserver.libev.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/php-libev-${appserver.libev.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/php-libev-${appserver.libev.version}" executable="make"/>
        <exec dir="${php-target.dir}/php-libev-${appserver.libev.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL event as shared extension                            -->
    <!-- ==================================================================== -->
    <target name="pecl-build-event" description="Builds the PECL event as shared extension.">
        <antcall target="get-event-src"/>
        <untar src="${lib.dir}/event-${appserver.event.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/event-${appserver.event.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/event-${appserver.event.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        	<arg value="--with-event-libevent-dir=${appserver.compile.prefix}"/>
        </exec>
        <exec dir="${php-target.dir}/event-${appserver.event.version}" executable="make"/>
        <exec dir="${php-target.dir}/event-${appserver.event.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL ev as shared extension                               -->
    <!-- ==================================================================== -->
    <target name="pecl-build-ev" description="Builds the PECL ev as shared extension.">
        <antcall target="get-ev-src"/>
        <untar src="${lib.dir}/ev-${appserver.ev.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/ev-${appserver.ev.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/ev-${appserver.ev.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/ev-${appserver.ev.version}" executable="make"/>
        <exec dir="${php-target.dir}/ev-${appserver.ev.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL AOP as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-AOP" description="Builds the PECL AOP as shared extension.">
        <antcall target="get-AOP-src"/>
        <untar src="${lib.dir}/AOP-${appserver.AOP.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/AOP-${appserver.AOP.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/AOP-${appserver.AOP.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/AOP-${appserver.AOP.version}" executable="make"/>
        <exec dir="${php-target.dir}/AOP-${appserver.AOP.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL xdebug as shared extension                           -->
    <!-- ==================================================================== -->
    <target name="pecl-build-xdebug" description="Builds the PECL xdebug as shared extension.">
        <antcall target="get-xdebug-src"/>
        <untar src="${lib.dir}/xdebug-${appserver.xdebug.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/xdebug-${appserver.xdebug.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/xdebug-${appserver.xdebug.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/xdebug-${appserver.xdebug.version}" executable="make"/>
        <exec dir="${php-target.dir}/xdebug-${appserver.xdebug.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL redis as shared extension                            -->
    <!-- ==================================================================== -->
    <target name="pecl-build-redis" description="Builds the PECL redis as shared extension.">
        <antcall target="get-redis-src"/>
        <untar src="${lib.dir}/redis-${appserver.redis.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/redis-${appserver.redis.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/redis-${appserver.redis.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/redis-${appserver.redis.version}" executable="make"/>
        <exec dir="${php-target.dir}/redis-${appserver.redis.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL appserver as shared extension                        -->
    <!-- ==================================================================== -->
    <target name="pecl-build-appserver" description="Builds the PECL appserver as shared extension.">
        <antcall target="get-ext-appserver-src"/>
        <untar src="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="${appserver.compile.prefix}/bin/phpize"/>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${appserver.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="make"/>
        <exec dir="${php-target.dir}/appserver-${appserver.ext-appserver.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install composer                                                     -->
    <!-- ==================================================================== -->
    <target name="install-composer" depends="build-runtime" description="Install composer.">
        <!-- download the composer installer -->
        <exec dir="${php-target.dir}" executable="curl">
            <arg line="-sS http://getcomposer.org/installer -o installer"/>
        </exec>
        <!-- install composer itself -->
        <exec dir="${php-target.dir}" executable="${appserver.compile.prefix}/bin/php">
            <arg line="installer -- --install-dir ${appserver.compile.prefix}/bin"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install ApplicationServer packages                                   -->
    <!-- ==================================================================== -->
	<target name="install-sources" unless="${runtime.only}" depends="install-composer" description="Install ApplicationServer packages.">
		<!-- clone the sources from github -->
		<exec dir="${php-target.dir}" executable="git">
			<arg line="clone ${appserver.url} --branch=${appserver.tag} download" />
		</exec>
		<!-- copy the sources to the target directory -->
		<copy todir="${appserver.compile.prefix}">
			<fileset dir="${php-target.dir}/download" defaultexcludes="false" includes="**/*"/>
		</copy>
		<!-- install the sources -->
        <exec dir="${appserver.compile.prefix}" executable="${appserver.compile.prefix}/bin/php">
            <arg line="${appserver.compile.prefix}/bin/composer.phar install"/>
        </exec>
	</target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPUnit integration tests                                   -->
    <!-- ==================================================================== -->
    <target name="run-integration-tests" description="Runs the PHPUnit integration tests.">
        <!-- copy the build files to the installation directory -->
        <copy todir="${appserver.compile.prefix}">
            <fileset dir="${basedir}">
                <include name="phpunit.xml"/>
            	<include name="composer.json"/>
                <include name="bootstrap.php"/>
        	</fileset>
        </copy>
        <!-- install the build utilities (PHPUnit etc.) -->
        <exec dir="${appserver.compile.prefix}" executable="${appserver.compile.prefix}/bin/php">
            <arg line="${appserver.compile.prefix}/bin/composer.phar install"/>
        </exec>
    	<!-- run the PHPUnit test for the runtime -->
        <exec executable="${appserver.compile.prefix}/bin/php" dir="${basedir}" failonerror="true">
            <arg line="${appserver.compile.prefix}/vendor/bin/phpunit --bootstrap bootstrap.php --configuration phpunit.xml" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Deploys the ApplicationServer default webapps               		  -->
    <!-- ==================================================================== -->
	<target name="deploy-default-webapps" unless="${runtime.only}" depends="get-default-webapps, install-sources" description="Deploys the ApplicationServer default webapps.">
    	<copy todir="${appserver.compile.prefix}/deploy">
    		<fileset dir="${basedir}/webapps">
    			<include name="*.phar"/>
    		</fileset>
    	</copy>
		<touch file="foo">
    		<fileset dir="${appserver.compile.prefix}/deploy">
    			<include name="*.phar"/>
    		</fileset>
			<globmapper from="*.phar" to="${appserver.compile.prefix}/deploy/*.phar.dodeploy"/>
	  	</touch>
	</target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the debian runtime          -->
    <!--                                                                      -->
    <!-- This is a wrapper for all distribution prepare tasks, as they have   -->
    <!-- similar dependencies as the main build-runtime task. So we wrap it   -->
    <!-- away to avoid ant dependency messups.                                -->
    <!-- ==================================================================== -->
    <target name="prepare-linux-build-system" depends="prepare" description="Install the necessary libraries to build the needed linux distribution runtime.">

        <!-- prepare the distribution build system -->
        <antcall target="prepare-${os.distribution}-build-system"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the debian runtime          -->
    <!-- ==================================================================== -->
    <target name="prepare-debian-build-system" if="${prepare.distribution.build}" description="Install the necessary libraries to build the debian runtime.">
	<exec dir="${php-target.dir}" executable="apt-get" inputstring="Y">
            <arg value="install"/>
            <arg value="ant"/>
            <arg value="autoconf"/>
            <arg value="make"/>
            <arg value="curl"/>
            <arg value="bison"/>
            <arg value="libxml2-dev"/>
            <arg value="libssl-dev"/>
            <arg value="pkg-config"/>
            <arg value="libbz2-dev"/>
            <arg value="libjpeg8-dev"/>
            <arg value="libpng-dev"/>
            <arg value="libfreetype6-dev"/>
            <arg value="libmcrypt-dev"/>
            <arg value="libmemcached-dev"/>
            <arg value="git-core"/>
            <arg value="libxpm-dev"/>
            <arg value="libc-client2007e-dev"/>
            <arg value="libpcre3-dev"/>
            <arg value="libpng12-dev"/>
            <arg value="libcurl4-openssl-dev"/>
            <arg value="libpng12-dev"/>
            <arg value="libevent-dev"/>
            <arg value="libev-dev"/>
            <arg value="libldap2-dev"/>
            <arg value="libicu-dev"/>
            <arg value="libxslt-dev"/>
        </exec>
    	<!-- Bugfix for missing symlink -->
    	<exec dir="/usr/lib" executable="ln">
    		<arg value="-s"/>
    		<arg value="${libldap.dir}/libldap.so"/>
    	</exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the raspbian runtime        -->
    <!--                                                                      -->
    <!-- We don't need normal dependencies, as we wrap the debian preparation -->
    <!-- ==================================================================== -->
    <target name="prepare-raspbian-build-system" if="${prepare.distribution.build}" depends="prepare-debian-build-system" description="Install the necessary libraries to build the raspbian runtime.">

        <!-- Only a wrapper, as steps are the same as in the prepare-debian-build-system task -->

    </target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the fedora runtime          -->
    <!-- ==================================================================== -->
    <target name="prepare-fedora-build-system" if="${prepare.distribution.build}" description="Install the necessary libraries to build the fedora runtime.">
        <exec dir="${php-target.dir}" executable="yum" inputstring="Y">
            <arg value="install"/>
            <arg value="ant"/>
            <arg value="autoconf"/>
            <arg value="curl"/>
            <arg value="bison"/>
            <arg value="libxml2"/>
            <arg value="libxml2-devel"/>
            <arg value="openssl-devel"/>
            <arg value="bzip2-devel"/>
            <arg value="libjpeg-turbo-devel"/>
            <arg value="libpng-devel"/>
            <arg value="freetype-devel"/>
            <arg value="libmcrypt-devel"/>
            <arg value="libmemcached-devel"/>
            <arg value="libXpm-devel"/>
            <arg value="pcre-devel"/>
            <arg value="libpng-devel"/>
            <arg value="libcurl-devel"/>
            <arg value="libpng-devel"/>
            <arg value="libevent-devel"/>
            <arg value="libev-devel"/>
            <arg value="gcc-c++"/>
            <arg value="openldap-devel"/>
            <arg value="rpm-build"/>
            <arg value="systemd-devel"/>
            <arg value="libicu-devel"/>
            <arg value="libxslt-devel"/>
        </exec>
        <!-- Bugfix for missing symlink -->
        <exec dir="/usr/${appserver.compile.libdir}" executable="ln">
            <arg value="-s"/>
            <arg value="libsystemd-daemon.so.0 libsystemd-daemon.so"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the centos runtime          -->
    <!-- ==================================================================== -->
    <target name="prepare-centos-build-system" if="${prepare.distribution.build}" description="Install the necessary libraries to build the centos runtime.">
        <exec executable="yum" inputstring="Y">
            <arg value="install"/>
            <arg value="ant"/>
            <arg value="autoconf"/>
            <arg value="curl"/>
            <arg value="bison"/>
            <arg value="libxml2"/>
            <arg value="libxml2-devel"/>
            <arg value="openssl-devel"/>
            <arg value="bzip2-devel"/>
            <arg value="libjpeg-turbo-devel"/>
            <arg value="libpng-devel"/>
            <arg value="freetype-devel"/>
            <arg value="libmcrypt-devel"/>
            <arg value="libmemcached-devel"/>
            <arg value="libXpm-devel"/>
            <arg value="pcre-devel"/>
            <arg value="libpng-devel"/>
            <arg value="libcurl-devel"/>
            <arg value="libevent-devel"/>
            <arg value="gcc-c++"/>
            <arg value="openldap-devel"/>
            <arg value="rpm-build"/>
            <arg value="libicu-devel"/>
            <arg value="libxslt-devel"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copy build files to target directory                                 -->
    <!-- ==================================================================== -->
    <target name="move-build-to-target" description="Copies build files to target directory.">
        <mkdir dir="${php-target.dir}/re/opt" />
    	<exec dir="${php-target.dir}" executable="mv">
    		<arg value="${appserver.compile.prefix}"/>
    		<arg value="${php-target.dir}/re/opt"/>
    	</exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a DEB package with the local ApplicationServer runtime    -->
    <!-- ==================================================================== -->
    <target name="create-deb" depends="deploy-default-webapps" description="Creates a DEB package with the local ApplicationServer runtime.">
        <!-- execute the JMeter performance tests -->
        <antcall target="run-performance-tests"/>
        <!-- copy build files to target directory -->
        <antcall target="move-build-to-target"/>
        <!-- copy init scripts to required directory -->
        <copy todir="${php-target.dir}/re">
            <fileset dir="${basedir}/buildfiles/debian">
                <include name="**/*"/>
            	<exclude name="DEBIAN/**"/>
            </fileset>
        </copy>
    	<!-- copy the configuration file to build the .deb -->
    	<copy todir="${php-target.dir}/re">
    		<fileset dir="${basedir}/buildfiles/debian">
    			<include name="DEBIAN/**"/>
    		</fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
    	</copy>
    	<!-- set the permissions of the postinstall script -->
        <chmod perm="755" file="${php-target.dir}/re/DEBIAN/postinst" />
        <!-- create the .deb file -->
        <exec dir="${php-target.dir}" executable="dpkg-deb" failonerror="true">
            <arg line="--build ${php-target.dir}/re ${package.name}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a RPM package with the local ApplicationServer runtime       -->
    <!-- ==================================================================== -->
    <target name="create-rpm" depends="deploy-default-webapps" description="Creates a RPM package with the local ApplicationServer runtime.">
        <!-- copy build files to target directory -->
        <antcall target="move-build-to-target"/>
		<!-- copy distribution build files -->
        <copy todir="${php-target.dir}/re">
            <fileset dir="${basedir}/buildfiles/${os.distribution}">
                <include name="**/*"/>
            	<exclude name="rpmbuild/**"/>
            </fileset>
        </copy>
    	<!-- copy the configuration file to build the .rpm -->
    	<copy file="${basedir}/buildfiles/${os.distribution}/rpmbuild/SPECS/appserver.spec" todir="${php-target.dir}">
            <filterchain>
                <expandproperties/>
            </filterchain>
    	</copy>
        <!-- create the .rpm file -->
        <exec dir="${php-target.dir}" executable="rpmbuild" failonerror="true">
            <arg line="--buildroot ${php-target.dir}/re -bb ${php-target.dir}/appserver.spec"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a .pkg package with the local ApplicationServer runtime      -->
    <!-- ==================================================================== -->
    <target name="create-pkg" depends="deploy-default-webapps" description="Creates a .pkg package with the local ApplicationServer runtime.">
    	<!-- execute the JMeter performance tests -->
    	<antcall target="run-performance-tests"/>
        <!-- copy build files to target directory -->
        <antcall target="move-build-to-target" />
        <!-- copy ioncube files to required directory -->
        <copy todir="${php-target.dir}/re">
            <fileset dir="${basedir}/buildfiles/macosx">
                <include name="**/*"/>
            	<exclude name="scripts/**"/>
            </fileset>
        </copy>
        <!-- copy pre/postinstall script files (to replace ANT variables only) -->
        <copy todir="${php-target.dir}">
            <fileset dir="${basedir}/buildfiles/macosx">
            	<include name="scripts/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    	<!-- make the install scripts executable -->
        <chmod perm="755" dir="${php-target.dir}/scripts" includes="*"/>
        <!-- create the .pkg file -->
        <exec dir="${basedir}" executable="pkgbuild">
            <arg value="--root"/>
            <arg value="${php-target.dir}/re"/>
            <arg value="--scripts"/>
            <arg value="${php-target.dir}/scripts"/>
            <arg value="--install-location"/>
            <arg value="/"/>
            <arg value="--version"/>
            <arg value="${appserver.version}"/>
            <arg value="--identifier"/>
            <arg value="com.techdivision.appserver"/>
            <arg value="${package.specific-dir}${package.name}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Starts the recently built application server instance on Mac OS X  -->
    <!-- ==================================================================== -->
    <target name="start-appserver-mac" description="Starts the recently builded application server instance on Mac OS X.">
        <exec executable="launchctl">
            <arg line="load -w ${appserver.compile.prefix}/sbin/plist/io.appserver.appserver.plist"/>
        </exec>
        <exec executable="launchctl">
            <arg line="load -w ${appserver.compile.prefix}/sbin/plist/io.appserver.appserver-php5-fpm.plist"/>
        </exec>
	</target>

    <!-- ==================================================================== -->
    <!-- Stops the recently built application server instance on Mac OS X   -->
    <!-- ==================================================================== -->
    <target name="stop-appserver-mac" description="Stops the recently builded application server instance on Mac OS X.">
        <exec executable="launchctl">
            <arg line="unload ${appserver.compile.prefix}/sbin/plist/io.appserver.appserver.plist"/>
        </exec>
        <exec executable="launchctl">
            <arg line="unload ${appserver.compile.prefix}/sbin/plist/io.appserver.appserver-php5-fpm.plist"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Starts the recently built application server instance on Linux     -->
    <!-- ==================================================================== -->
    <target name="start-appserver-linux" description="Starts the recently builded application server instance on Linux.">
    	<!-- start the server with the distribution specific start scripts -->
        <antcall target="start-appserver-${os.family}-${os.distribution}"/>
        <!-- we need to set permissions to enable logging -->
        <exec executable="chown">
        	<arg line="-R ${appserver.user}:${appserver.group} ${appserver.compile.prefix}/var"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Stops the recently built application server instance on Linux      -->
    <!-- ==================================================================== -->
    <target name="stop-appserver-linux" description="Stops the recently builded application server instance on Linux.">
        <!-- stop the server with the distribution specific start scripts -->
        <antcall target="stop-appserver-${os.family}-${os.distribution}"/>
        <!-- we want to re-set permissions -->
        <exec executable="chown">
            <arg line="-R root:root ${appserver.compile.prefix}/var"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Starts the recently built application server instance on Debian    -->
    <!-- ==================================================================== -->
    <target name="start-appserver-linux-debian" description="Starts the recently builded application server instance on Debian.">
        <exec executable="start-stop-daemon">
            <arg line="--start --quiet --background --chdir ${appserver.compile.prefix} --make-pidfile --pidfile ${appserver.compile.prefix}/var/run/appserver.pid --exec ${appserver.compile.prefix}/bin/php -- -dappserver.php_sapi=appserver -dappserver.remove_functions=getenv,putenv ${appserver.compile.prefix}/server.php"/>
        </exec>
        <exec executable="start-stop-daemon">
            <arg line="--start --quiet --exec ${appserver.compile.prefix}/sbin/php-fpm -- --fpm-config ${appserver.compile.prefix}/etc/php-fpm.conf"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Stops the recently built application server instance on Debian     -->
    <!-- ==================================================================== -->
    <target name="stop-appserver-linux-debian" description="Stops the recently builded application server instance on Debian.">
        <exec executable="start-stop-daemon">
            <arg line="--stop --pidfile ${appserver.compile.prefix}/var/run/appserver.pid"/>
        </exec>
        <exec executable="start-stop-daemon">
            <arg line="--stop --quiet --oknodo --retry=0/30/TERM/5/KILL/5 --exec ${appserver.compile.prefix}/sbin/php-fpm"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Executes the JMeter testsuite of the example application             -->
    <!-- ==================================================================== -->
	<target name="run-performance-tests" description="Executes the JMeter testsuite of the example application.">
		<!-- download and extract JMeter -->
		<get src="${jmeter.download.url}" dest="${php-target.dir}"/>
		<untar src="${php-target.dir}/apache-jmeter-${jmeter.version}.tgz" dest="${php-target.dir}" compression="gzip"/>
        <chmod perm="0755" file="${php-target.dir}/apache-jmeter-${jmeter.version}/bin/jmeter"/>
        <!-- start the application server instance -->
        <antcall target="start-appserver-${os.family}"/>
	    <!-- wait until the application server has been started -->
		<waitfor maxwait="10" maxwaitunit="minute" checkevery="500" checkeveryunit="millisecond">
			<socket port="9080" server="127.0.0.1"/>
		</waitfor>
		<!-- execute the JMeter testsuite -->
        <exec executable="${php-target.dir}/apache-jmeter-${jmeter.version}/bin/jmeter" >
            <arg line="-n -t ${appserver.compile.prefix}/webapps/example/jmeter/example-testplan.jmx -Joutput_dir=${php-target.dir}"/>
        </exec>
		<!-- stop the application server -->
        <antcall target="stop-appserver-${os.family}"/>
        <!-- delete log files generated by the performance test -->
        <delete>
            <fileset dir="${appserver.compile.prefix}/var/log">
                <include name="*.log"/>
            </fileset>
        </delete>
	</target>

    <!-- ==================================================================== -->
    <!-- Check if Windows PHP binaries has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="WIN-check-php-binaries-present" description="Check if Windows PHP binaries has been downloaded yet.">
        <available file="${lib.dir}/php-${appserver.php.version}-Win32-VC${win.compiler-version}-${win.os.architecture}.zip" property="win-php-binaries.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get Windows PHP binaries package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="WIN-get-php-binaries" depends="WIN-check-php-binaries-present" unless="win-php-binaries.present" description="Get Windows PHP binaries package by given version number.">
        <get src="${win.php.download.url}" dest="${lib.dir}/php-${appserver.php.version}-Win32-VC${win.compiler-version}-${win.os.architecture}.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows apcu binaries has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="WIN-check-apcu-binaries-present" description="Check if Windows apcu binaries has been downloaded yet.">
        <available file="${lib.dir}/php_apcu-${appserver.apcu.version}-5.5-ts-vc${win.compiler-version}-${win.os.architecture}.zip" property="win-apcu-binaries.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows event binaries has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="WIN-check-event-binaries-present" description="Check if Windows event binaries has been downloaded yet.">
        <available file="${lib.dir}/php_event-${appserver.event.version}-5.5-ts-vc${win.compiler-version}-${win.os.architecture}.zip" property="win-event-binaries.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get Windows apcu binaries package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="WIN-get-apcu-binaries" depends="WIN-check-apcu-binaries-present" unless="win-apcu-binaries.present" description="Get Windows apcu binaries package by given version number.">
        <get src="${win.apcu.download.url}" dest="${lib.dir}/php_apcu-${appserver.apcu.version}-5.5-ts-vc${win.compiler-version}-${win.os.architecture}.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows pthreads binaries has been downloaded yet   		  -->
    <!-- ==================================================================== -->
    <target name="WIN-check-pthreads-binaries-present" description="Check if Windows pthreads binaries has been downloaded yet.">
        <available file="${lib.dir}/php_pthreads-${appserver.pthreads.version}-5.5-ts-vc${win.compiler-version}-${win.os.architecture}.zip" property="win-pthreads-binaries.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows PHP SDK has been downloaded yet                     -->
    <!-- ==================================================================== -->
    <target name="WIN-check-php-sdk-present" description="Check if Windows PHP SDK has been downloaded yet.">
        <available file="${win.build-workspace.dir}/php-sdk-binary-tools-${win.php-sdk.timestamp}.zip" property="win-php-sdk.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows PHP build dependencies have been downloaded yet     -->
    <!-- ==================================================================== -->
    <target name="WIN-check-php-build-deps-present" description="Check if Windows PHP build dependencies have been downloaded yet.">
        <available file="${win.build-workspace.dir}/deps-${appserver.php.major-version}-vc${win.compiler-version}-${win.os.architecture}.7z" property="win-php-build-deps.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get Windows pthreads binaries package by given version number		  -->
    <!-- ==================================================================== -->
    <target name="WIN-get-pthreads-binaries" depends="WIN-check-pthreads-binaries-present" unless="win-pthreads-binaries.present" description="Get Windows pthreads binaries package by given version number.">
        <get src="${win.pthreads.download.url}" dest="${lib.dir}/php_pthreads-${appserver.pthreads.version}-5.5-ts-vc${win.compiler-version}-${win.os.architecture}.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get Windows event binaries package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="WIN-get-event-binaries" depends="WIN-check-event-binaries-present" unless="win-event-binaries.present" description="Get Windows event binaries package by given version number.">
        <get src="${win.event.download.url}" dest="${lib.dir}/php_event-${appserver.event.version}-5.5-ts-vc${win.compiler-version}-${win.os.architecture}.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Download the PHP SDK from the official site                          -->
    <!-- ==================================================================== -->
    <target name="WIN-get-php-sdk" depends="WIN-check-php-sdk-present" unless="win-php-sdk.present" description="Download the PHP SDK from the official site.">
        <get src="${win.php-sdk.download.url}" dest="${win.build-workspace.dir}/php-sdk-binary-tools-${win.php-sdk.timestamp}.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Download the dependencies for building PHP                           -->
    <!-- ==================================================================== -->
    <target name="WIN-get-php-build-deps" depends="WIN-check-php-build-deps-present" unless="win-php-build-deps.present" description="Download the dependencies for building PHP.">
        <get src="${win.php-build-deps.download.url}" dest="${win.build-workspace.dir}/deps-${appserver.php.major-version}-vc${win.compiler-version}-${win.os.architecture}.7z"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Untar the PHP source into the development dir                        -->
    <!-- ==================================================================== -->
    <target name="WIN-prepare-php-src" depends="get-php-src" description="Untar the PHP source into the development dir.">
        <!-- Untar the php source into the sdk environment -->
        <untar src="${lib.dir}/php-${appserver.php.version}.tar.gz" dest="${win.php-buildtree.dir}" compression="gzip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Unzip the php build dependencies into the development dir            -->
    <!-- ==================================================================== -->
    <target name="WIN-prepare-php-build-deps" depends="WIN-get-php-build-deps,WIN-check-7zip-present" description="Unzip the php build dependencies into the development dir.">
        <!-- Unzip the php build dependencies into the sdk environment -->
        <exec dir="${win.build-workspace.dir}" executable="${win.7zip-cmd.dir}/7z">
            <arg line="x deps-${appserver.php.major-version}-vc${win.compiler-version}-${win.os.architecture}.7z -o${win.php-buildtree.dir}"/>
        </exec>
    </target>

    <!-- =============================================================================== -->
    <!-- Prepare the appserver extension source by including it in the build environment -->
    <!-- =============================================================================== -->
    <target name="WIN-prepare-ext-appserver-src" depends="get-ext-appserver-src" description="Prepare the appserver extension source by including it in the build environment.">
        <!-- Untar the appserver extension source into the sdk environment -->
        <untar src="${lib.dir}/ext-appserver-${appserver.ext-appserver.version}.tgz" dest="${win.php-sdk.dir}" compression="gzip"/>
        <!-- Move the src files into the folder they belong -->
        <copy todir="${win.php-buildtree.dir}/php-${appserver.php.version}/ext/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${win.php-sdk.dir}/appserver-${appserver.ext-appserver.version}">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Will check if there is an usable instance of 7zip installed          -->
    <!-- ==================================================================== -->
    <target name="WIN-check-7zip-present" description="Will check if there is an usable instance of 7zip installed">
        <!-- Set property if the executable exists -->
        <available file="${win.7zip-cmd.dir}/7z.exe" property="win.7zip.present"/>
        <!-- Fail if property was not set -->
        <fail unless="win.7zip.present"/>
    </target>

    <!-- ============================================================================= -->
    <!-- Will check if there is an usable instance of Visual Studio C/C++ installed    -->
    <!-- ============================================================================= -->
    <target name="WIN-check-vc-present" description="Will check if there is an usable instance of Visual Studio C/C++ installed">
        <!-- Set property if the executable exists -->
        <available file="${win.native-tools-cmd.dir}/vcvarsall.bat" property="win.vc.present"/>
        <!-- Fail if property was not set -->
        <fail unless="win.vc.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Checks if the appserver extension got built as it should             -->
    <!-- ==================================================================== -->
    <target name="WIN-check-ext-appserver-built" description="Checks if the appserver extension got built as it should.">
        <!-- Set property if the dll exists -->
        <available file="${custom-lib.dir}/php_appserver-${appserver.ext-appserver.version}.dll" property="win.ext-appserver.present"/>
        <!-- Fail if property was not set -->
        <fail unless="win.ext-appserver.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Checks if php buildtree even exists                                  -->
    <!-- ==================================================================== -->
    <target name="WIN-check-php-buildtree-present" description="Checks if php buildtree even exists .">
        <!-- Set property if the buildtree directory exists -->
        <available file="${win.php-buildtree.dir}/deps/lib" property="win.php-buildtree.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Will check if the environment has already been prepared.             -->
    <!-- This is done by checking if a non-empty buildtree exists             -->
    <!-- ==================================================================== -->
    <target name="WIN-check-php-sdk-prepared" depends="WIN-check-php-buildtree-present" if="win.php-buildtree.present" description="Will check if the environment has already been prepared.">
        <!-- Define a fileset we can pickup -->
        <fileset dir="${win.php-buildtree.dir}/deps/lib" id="php-buildtree.fileset"/>
        <!-- Set the property if the fileset is not empty -->
        <pathconvert refid="php-buildtree.fileset"
                     property="win-php-sdk.prepared"
                     setonempty="false"/>
    </target>

    <!-- ======================================================================= -->
    <!-- Will expand the properties of the scripts and store them in custom-libs -->
    <!-- ======================================================================= -->
    <target name="WIN-expand-scripts" description="Will expand the properties of the scripts and store them in custom-libs.">
        <!-- We have to expand the scripts here, as we are going to use them -->
        <copy todir="${custom-lib.dir}">
            <fileset dir="${basedir}/buildfiles/win">
                <include name="scripts/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepare Windows PHP SDK as a build environment                       -->
    <!-- ==================================================================== -->
    <target name="WIN-prepare-php-sdk" depends="WIN-check-php-sdk-prepared, WIN-expand-scripts" unless="win-php-sdk.prepared" description="Prepare Windows PHP SDK as a build environment.">
        <!-- Without Visual Studio installed this makes no sense! -->
        <antcall target="WIN-check-vc-present"/>
        <!-- Download the PHP SDK archive -->
        <antcall target="WIN-get-php-sdk"/>
        <!-- Unzip the php sdk into the development environment -->
        <unzip src="${win.build-workspace.dir}/php-sdk-binary-tools-${win.php-sdk.timestamp}.zip" dest="${win.php-sdk.dir}"/>
        <!-- Set the build environment vars and create the build tree -->
        <exec dir="${custom-lib.dir}/scripts" executable="cmd" failonerror="true">
            <arg value="/C"/>
            <arg value="prepare_php_sdk.bat"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Will create binaries which cannot be downloaded as .dll. 		      -->
    <!-- ==================================================================== -->
    <target name="WIN-build-binaries" depends="WIN-prepare-php-src, WIN-prepare-php-build-deps, WIN-prepare-php-sdk, WIN-expand-scripts" description="Will create binaries which cannot be downloaded as .dll.">
        <!-- Prepare the appserve src as we need it -->
        <antcall target="WIN-prepare-ext-appserver-src"/>
        <!-- Do the thing -->
        <exec dir="${custom-lib.dir}/scripts" executable="cmd" failonerror="true">
            <arg value="/C"/>
            <arg value="build_extensions.bat"/>
        </exec>
        <!-- Finally move the created dll files into the "custom-lib" dir where they get picked up -->
        <copy todir="${custom-lib.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${win.php-buildtree.dir}/php-${appserver.php.version}/Release_TS">
                <include name="**/*.dll" />
            </fileset>
        </copy>
        <!-- For some special extensions we have to attach version numbers -->
        <move file="${custom-lib.dir}/php_appserver.dll" tofile="${custom-lib.dir}/php_appserver-${appserver.ext-appserver.version}.dll"/>
        <!-- Fail if certain binaries did not get built -->
        <antcall target="WIN-check-ext-appserver-built"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PHP/PECL Windows binaries 							  -->
    <!-- ==================================================================== -->
	<target name="WIN-prepare-binaries" depends="prepare" description="Prepares the PHP/PECL Windows binaries.">
		<!-- download the PHP/PECL binaries if not already available -->
		<antcall target="WIN-get-php-binaries"/>
        <!-- Build binaries we cannot download ourselves (if not already present) -->
        <antcall target="WIN-build-binaries"/>
        <!-- Get the apcu binaries -->
        <antcall target="WIN-get-apcu-binaries"/>
        <!-- antcall target="WIN-get-pthreads-binaries"/ -->
        <antcall target="WIN-get-event-binaries"/>
		<!-- extract the PHP/PECL binaries into the target folder -->
        <unzip src="${lib.dir}/php-${appserver.php.version}-Win32-VC${win.compiler-version}-${win.os.architecture}.zip" dest="${php-target.dir}/appserver/php"/>
        <unzip src="${lib.dir}/php_apcu-${appserver.apcu.version}-5.5-ts-vc${win.compiler-version}-${win.os.architecture}.zip" dest="${php-target.dir}/apcu"/>
        <!-- unzip src="${lib.dir}/php_pthreads-${appserver.pthreads.version}-5.5-ts-vc${win.compiler-version}-${win.os.architecture}.zip" dest="${php-target.dir}/pthreads"/ -->
        <unzip src="${lib.dir}/php_event-${appserver.event.version}-5.5-ts-vc${win.compiler-version}-${win.os.architecture}.zip" dest="${php-target.dir}/event"/>
		<!-- copy the DLL's to the PHP ext directory -->
		<copy file="${php-target.dir}/apcu/php_apcu.dll" todir="${php-target.dir}/appserver/php/ext"/>
		<!-- copy file="${php-target.dir}/pthreads/php_pthreads.dll" todir="${php-target.dir}/appserver/php/ext"/ -->
		<!-- copy file="${php-target.dir}/pthreads/pthreadVC2.dll" todir="${php-target.dir}/appserver/php"/ -->
		<copy file="${php-target.dir}/event/php_event.dll" todir="${php-target.dir}/appserver/php/ext"/>
		<!-- copy the appserver DLL to the PHP ext directory -->
		<copy file="${custom-lib.dir}/php_appserver-${appserver.ext-appserver.version}.dll" tofile="${php-target.dir}/appserver/php/ext/php_appserver.dll"/>
		<copy file="${custom-lib.dir}/php_pthreads-${appserver.pthreads.version}.dll" tofile="${php-target.dir}/appserver/php/ext/php_pthreads.dll"/>
		<copy file="${custom-lib.dir}/pthreadVC2.dll" tofile="${php-target.dir}/appserver/php/pthreadVC2.dll"/>
		<!-- copy runtime sources to target directory -->
        <copy todir="${php-target.dir}/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="**/*" />
                <exclude name="etc/**/*"/>
            </fileset>
        </copy>
        <copy todir="${php-target.dir}/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-src.dir}">
                <include name="etc/**/*"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
		<!-- copy windows related files to the target directory -->
        <copy todir="${php-target.dir}">
            <fileset dir="${basedir}/buildfiles/win">
                <include name="**/*"/>
            	<exclude name="appserver-izpack.xml"/>
            </fileset>
        </copy>
		<!-- copy IzPack configuration + .bat files to the target directory -->
        <copy todir="${php-target.dir}" file="${basedir}/buildfiles/win/appserver-izpack.xml">
        	<fileset dir="${basedir}/buildfiles/win">
            	<include name="appserver-izpack.xml"/>
            	<include name="appserver/*.bat"/>
        	</fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
		<!-- download and install composer -->
		<get src="${win.composer.download.url}" dest="${php-target.dir}/installer"/>
        <exec dir="${php-target.dir}" executable="${php-target.dir}/appserver/php/php">
            <arg line="installer -- --install-dir ${php-target.dir}/appserver/bin"/>
        </exec>
        <!-- clone the sources from github -->
        <exec dir="${php-target.dir}" executable="git">
            <arg line="clone ${appserver.url} --branch=${appserver.tag} download" />
        </exec>
        <!-- copy the sources to the target directory -->
        <copy todir="${php-target.dir}/appserver">
            <fileset dir="${php-target.dir}/download" defaultexcludes="false" includes="**/*"/>
        </copy>
        <!-- install the sources -->
        <exec dir="${php-target.dir}/appserver" executable="${php-target.dir}/appserver/php/php">
            <arg line="${php-target.dir}/appserver/bin/composer.phar install"/>
        </exec>
		<!-- install the demo application -->
        <exec dir="${php-target.dir}/appserver" executable="${php-target.dir}/appserver/php/php">
            <arg line="${php-target.dir}/appserver/bin/composer.phar --no-interaction create-project --keep-vcs techdivision/techdivision_applicationserverproject ${php-target.dir}/appserver/webapps/demo dev-master"/>
        </exec>
		<!-- copy API/Admin + example phars -->
    	<copy todir="${php-target.dir}/appserver/deploy">
    		<fileset dir="${basedir}/webapps">
    			<include name="*.phar"/>
    		</fileset>
    	</copy>
		<!-- create the .dodeploy files -->
        <touch file="foo">
            <fileset dir="${php-target.dir}/appserver/deploy">
                <include name="*.phar"/>
            </fileset>
            <globmapper from="*.phar" to="${php-target.dir}/appserver/deploy/*.phar.dodeploy"/>
        </touch>
	</target>

    <!-- ==================================================================== -->
    <!-- Creates the IzPack installer JAR file 					      		  -->
    <!-- ==================================================================== -->
	<target name="WIN-create-jar" description="Creates the IzPack installer JAR file.">
		<!-- prepare the PHP/PECL binaries + appserver sources -->
		<antcall target="WIN-prepare-binaries"/>
		<!-- extend the classpath with the IzPack JAR's -->
		<path id="build.classpath">
	        <fileset dir="${izpack.installation.dir}">
	            <include name="lib/*.jar" />
	        </fileset>
	    </path>
		<!-- declare the IzPack task -->
	    <taskdef name="izpack" classpathref="build.classpath" classname="com.izforge.izpack.ant.IzPackTask" />
		<!-- create the IzPack installer JAR file -->
        <izpack input="${php-target.dir}\appserver-izpack.xml"
                output="${php-target.dir}\${package.name}"
                installerType="standard"
                inheritAll="true"
                basedir="${php-target.dir}"
                izPackDir=" ${izpack.installation.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Backup of all github repositories   					      		  -->
    <!-- ==================================================================== -->
    <target name="github-backup" description="Backs up all appserver github repositories">
        <!-- get current timestamp -->
        <tstamp>
            <format property="date" pattern="dd-MM-yyyy"/>
        </tstamp>

        <!-- create backup folder -->
        <mkdir dir="${github.backup.dir}/backup-${date}"/>

        <!-- checkout all appserver repositories -->
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_Runtime.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ServletModule.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_WebServer.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ApplicationServerNeos.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_Http.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_PhpModule.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_MemcacheServer.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_LemCacheContainer.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/appserver-io-php/php-ext-appserver.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ApplicationServerApi.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ApplicationServer.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_MemcacheProtocol.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_RewriteModule.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_WebContainer.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ServletEngine.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_Phar.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ServletContainer.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ApplicationServerProject.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_Lang.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ApplicationServerWebsite.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ApplicationServerMagento.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_AppserverAdmin.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ApplicationServerExample.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_Context.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_Servlet.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_Storage.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_PersistenceContainerClient.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_PersistenceContainer.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_Stream.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_MessageQueueClient.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_Socket.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_MessageQueue.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_WebSocketContainer.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_AppserverIo.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/TechDivision_ApplicationServerExampleSymfony.git"/>
        </exec>
        <exec executable="${git.bin}" dir="${github.backup.dir}/backup-${date}">
            <arg line="clone https://github.com/techdivision/php-sapi-appserver.git"/>
        </exec>

        <!-- compress current backup -->
        <exec executable="${bin.extract}" dir="${github.backup.dir}">
            <arg line="czvf backup-${date}.tgz backup-${date}"/>
        </exec>

        <!-- delete backup folder -->
        <delete dir="${github.backup.dir}/backup-${date}" includeEmptyDirs="true"/>

        <!-- delete old backups -->
        <delete includeEmptyDirs="true">
            <fileset dir="${github.backup.dir}" includes="**/*" excludes="backup-${date}.tgz"/>
        </delete>
    </target>

</project>
