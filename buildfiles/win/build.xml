<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-php/runtime-win" basedir=".">

    <!-- ==================================================================== -->
    <!-- Load the environment variables into our properties                   -->
    <!-- ==================================================================== -->
    <property environment="env" />

    <!-- ==================================================================== -->
    <!-- Load the default properties after loading default properties of the  -->
    <!-- os.distribution. This allows recursive overriding of default         -->
    <!-- properties.                                                          -->
    <!-- ==================================================================== -->
    <property file="${basedir}/buildfiles/${os.family}/build.default.properties" />

    <!-- ==================================================================== -->
    <!-- Create some basic properties which we need for further processing    -->
    <!-- The property hub.scp-user is missing on purpose and has to be        -->
    <!-- provided within the build environment                                -->
    <!-- ==================================================================== -->
    <property name="custom-lib.dir" value="${basedir}/buildfiles/${os.family}/custom-lib" />
    
    <!-- ==================================================================== -->
    <!-- Copies any built package to the snapshot hosting server.             -->
    <!-- ==================================================================== -->
    <target name="copy-to-hub" depends="create-package" description="Copies any built package to the snapshot hosting server.">
        <echo message="Now try to upload ${package.specific-dir}${package.name} to snapshot server"/>
        <scp file="${package.specific-dir}${package.name}" todir="${hub.scp-user}@${hub.address}:${hub.snapshot-path}" keyfile="${user.home}/.ssh/id_rsa" />
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows PHP SDK has been downloaded yet                     -->
    <!-- ==================================================================== -->
    <target name="check-php-sdk-present" description="Check if Windows PHP SDK has been downloaded yet.">
        <available file="${build-workspace.dir}/php-sdk-binary-tools-${php-sdk.timestamp}.zip" property="php-sdk.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if Windows PHP build dependencies have been downloaded yet     -->
    <!-- ==================================================================== -->
    <target name="check-php-build-deps-present" description="Check if Windows PHP build dependencies have been downloaded yet.">
        <available file="${build-workspace.dir}/deps-${runtime.php.major-version}-vc${compiler-version}-${os.architecture}.7z" property="php-build-deps.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Download the PHP SDK from the official site                          -->
    <!-- ==================================================================== -->
    <target name="get-php-sdk" depends="check-php-sdk-present" unless="php-sdk.present" description="Download the PHP SDK from the official site.">
        <get src="${php-sdk.download.url}" dest="${build-workspace.dir}/php-sdk-binary-tools-${php-sdk.timestamp}.zip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Download the dependencies for building PHP                           -->
    <!-- ==================================================================== -->
    <target name="get-php-build-deps" depends="check-php-build-deps-present" unless="php-build-deps.present" description="Download the dependencies for building PHP.">
        <get src="${php-build-deps.download.url}" dest="${build-workspace.dir}/deps-${runtime.php.major-version}-vc${compiler-version}-${os.architecture}.7z"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Untar the PHP source into the development dir                        -->
    <!-- ==================================================================== -->
    <target name="prepare-php-src" description="Untar the PHP source into the development dir.">
        <untar src="${lib.dir}/php-${runtime.php.version}.tar.gz" dest="${php-buildtree.dir}" compression="gzip"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Unzip the php build dependencies into the development dir            -->
    <!-- ==================================================================== -->
    <target name="prepare-php-build-deps" depends="get-php-build-deps,check-7zip-present" description="Unzip the php build dependencies into the development dir.">
        <!-- Unzip the php build dependencies into the sdk environment -->
        <exec dir="${build-workspace.dir}" executable="${7zip-cmd.dir}/7z">
            <arg line="x deps-${runtime.php.major-version}-vc${compiler-version}-${os.architecture}.7z -o${php-buildtree.dir}"/>
        </exec>
    </target>

    <!-- =============================================================================== -->
    <!-- Prepare the appserver extension source by including it in the build environment -->
    <!-- =============================================================================== -->
    <target name="prepare-ext-appserver-src" description="Prepare the appserver extension source by including it in the build environment.">
        <!-- untar the appserver extension source into the sdk environment -->
        <untar src="${lib.dir}/ext-appserver-${runtime.ext-appserver.version}.tgz" dest="${php-sdk.dir}" compression="gzip"/>
        <!-- move the src files into the folder they belong -->
        <copy todir="${php-buildtree.dir}/php-${runtime.php.version}/ext/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-sdk.dir}/appserver-${runtime.ext-appserver.version}">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Will check if there is an usable instance of 7zip installed          -->
    <!-- ==================================================================== -->
    <target name="check-7zip-present" description="Will check if there is an usable instance of 7zip installed">
        <!-- Set property if the executable exists -->
        <available file="${7zip-cmd.dir}/7z.exe" property="7zip.present"/>
        <!-- Fail if property was not set -->
        <fail unless="7zip.present"/>
    </target>

    <!-- ============================================================================= -->
    <!-- Will check if there is an usable instance of Visual Studio C/C++ installed    -->
    <!-- ============================================================================= -->
    <target name="check-vc-present" description="Will check if there is an usable instance of Visual Studio C/C++ installed">
        <!-- Set property if the executable exists -->
        <available file="${native-tools-cmd.dir}/vcvarsall.bat" property="vc.present"/>
        <!-- Fail if property was not set -->
        <fail unless="vc.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Checks if the appserver extension got built as it should             -->
    <!-- ==================================================================== -->
    <target name="check-ext-appserver-built" description="Checks if the appserver extension got built as it should.">
        <!-- Set property if the dll exists -->
        <available file="${target.dir}/php_appserver-${runtime.ext-appserver.version}.dll" property="ext-appserver.present"/>
        <!-- Fail if property was not set -->
        <fail unless="ext-appserver.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Checks if php buildtree even exists                                  -->
    <!-- ==================================================================== -->
    <target name="check-php-buildtree-present" description="Checks if php buildtree even exists .">
        <!-- Set property if the buildtree directory exists -->
        <available file="${php-buildtree.dir}/deps/lib" property="php-buildtree.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Will check if the environment has already been prepared.             -->
    <!-- This is done by checking if a non-empty buildtree exists             -->
    <!-- ==================================================================== -->
    <target name="check-php-sdk-prepared" depends="check-php-buildtree-present" if="php-buildtree.present" description="Will check if the environment has already been prepared.">
        <!-- Define a fileset we can pickup -->
        <fileset dir="${php-buildtree.dir}/deps/lib" id="php-buildtree.fileset"/>
        <!-- Set the property if the fileset is not empty -->
        <pathconvert refid="php-buildtree.fileset"
                     property="php-sdk.prepared"
                     setonempty="false"/>
    </target>

    <!-- ======================================================================= -->
    <!-- Will expand the properties of the scripts and store them in the target  -->
	<!-- directory.                                                              -->
    <!-- ======================================================================= -->
    <target name="expand-scripts" description="Will expand the properties of the scripts and store them in target directory.">
        <!-- We have to expand the scripts here, as we are going to use them -->
        <copy todir="${target.dir}">
            <fileset dir="${basedir}/buildfiles/${os.family}">
                <include name="scripts/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepare Windows PHP SDK as a build environment                       -->
    <!-- ==================================================================== -->
    <target name="prepare-php-sdk" depends="check-php-sdk-prepared, expand-scripts" unless="php-sdk.prepared" description="Prepare Windows PHP SDK as a build environment.">
        <!-- Without Visual Studio installed this makes no sense! -->
        <antcall target="check-vc-present"/>
        <!-- Download the PHP SDK archive -->
        <antcall target="get-php-sdk"/>
        <!-- Unzip the php sdk into the development environment -->
        <unzip src="${build-workspace.dir}/php-sdk-binary-tools-${php-sdk.timestamp}.zip" dest="${php-sdk.dir}"/>
        <!-- Set the build environment vars and create the build tree -->
        <exec dir="${target.dir}/scripts" executable="cmd" failonerror="true">
            <arg value="/C"/>
            <arg value="prepare_php_sdk.bat"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Will create binaries which cannot be downloaded as .dll.             -->
    <!-- ==================================================================== -->
    <target name="build-binaries" depends="prepare-php-src, prepare-php-build-deps, prepare-php-sdk, expand-scripts" description="Will create binaries which cannot be downloaded as .dll.">
        <!-- Prepare the appserve src as we need it -->
        <antcall target="prepare-ext-appserver-src"/>
        <!-- Do the thing -->
        <exec dir="${target.dir}/scripts" executable="cmd" failonerror="true">
            <arg value="/C"/>
            <arg value="build_extensions.bat"/>
        </exec>
        <!-- Finally move the created dll files into the "target" dir where they get picked up -->
        <copy todir="${target.dir}" preservelastmodified="true" overwrite="true">
            <fileset dir="${php-buildtree.dir}/php-${runtime.php.version}/Release_TS">
                <include name="**/*.dll" />
            </fileset>
        </copy>
        <!-- For some special extensions we have to attach version numbers -->
        <move file="${target.dir}/php_appserver.dll" tofile="${target.dir}/php_appserver-${runtime.ext-appserver.version}.dll"/>
        <!-- Fail if certain binaries did not get built -->
        <antcall target="check-ext-appserver-built"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PHP/PECL Windows binaries                               -->
    <!-- ==================================================================== -->
    <target name="build-runtime" description="Prepares the PHP/PECL Windows binaries.">
        
    	<!-- prepare the local build environment -->
    	<antcall target="prepare" />
        
    	<!-- Build binaries we cannot download ourselves (if not already present) -->
        <antcall target="build-binaries"/>
        
    	<!-- extract the PHP/PECL binaries into the target folder -->
        <unzip src="${lib.dir}/php-${runtime.php.version}-Win32-VC${compiler-version}-${os.architecture}.zip" dest="${target.dir}/appserver/php"/>
        <unzip src="${lib.dir}/php_apcu-${runtime.apcu.version}-5.5-ts-vc${compiler-version}-${os.architecture}.zip" dest="${target.dir}/apcu"/>
        <!-- unzip src="${lib.dir}/php_pthreads-${runtime.pthreads.version}-5.5-ts-vc${compiler-version}-${os.architecture}.zip" dest="${target.dir}/pthreads"/ -->
        <unzip src="${lib.dir}/php_event-${runtime.event.version}-5.5-ts-vc${compiler-version}-${os.architecture}.zip" dest="${target.dir}/event"/>
        
    	<!-- copy the DLL's to the PHP ext directory -->
        <copy file="${target.dir}/apcu/php_apcu.dll" todir="${target.dir}/appserver/php/ext"/>
        <!-- copy file="${target.dir}/pthreads/php_pthreads.dll" todir="${target.dir}/appserver/php/ext"/ -->
        <!-- copy file="${target.dir}/pthreads/pthreadVC2.dll" todir="${target.dir}/appserver/php"/ -->
        <copy file="${target.dir}/event/php_event.dll" todir="${target.dir}/appserver/php/ext"/>
    	
        <!-- copy the appserver DLL to the PHP ext directory -->
        <copy file="${target.dir}/php_appserver-${runtime.ext-appserver.version}.dll" tofile="${target.dir}/appserver/php/ext/php_appserver.dll"/>
        <copy file="${custom-lib.dir}/php_pthreads-${runtime.pthreads.version}.dll" tofile="${target.dir}/appserver/php/ext/php_pthreads.dll"/>
        <copy file="${custom-lib.dir}/pthreadVC2.dll" tofile="${target.dir}/appserver/php/pthreadVC2.dll"/>

        <!-- copy runtime files from src directory -->
        <antcall target="copy-buildfiles" />
    	
        <!-- installs the Composer dependency manager -->
        <antcall target="install-composer" />
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the build property package.name                             -->
    <!-- ==================================================================== -->
    <target name="prepare-package-name" description="Prepares the build property package.name">
        <!-- inline JS to extract the tag from the GIT_BRANCH environment variable -->
        <script language="javascript"><![CDATA[
            gitBranch = project.getProperty("env.GIT_BRANCH");
            gitTag = gitBranch.substring(gitBranch.lastIndexOf("/") + 1);
            project.setProperty("GIT_TAG", gitTag);
        ]]></script>
        <!-- prepare the property package.name -->
        <property name="package.name" 
            value="appserver-runtime-${GIT_TAG}.${build.number}.${os.qualified.name}.${os.architecture}.${os.package-extension}"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates the .zip package file                                        -->
    <!-- ==================================================================== -->
    <target name="create-package" depends="prepare-package-name" description="Creates the .zip package file.">
    	<zip destfile="${package.specific-dir}${package.name}" compress="true">
    		<zipfileset dir="${target.dir}" includes="appserver/**/*" />
    	</zip>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the os.family + os.distribution specific buildfiles           -->
    <!-- into the dist                                                        -->
    <!-- ==================================================================== -->
    <target name="copy-buildfiles" description="Prepares the appserver sources">
        <copy todir="${target.dir}/appserver" preservelastmodified="true" overwrite="true">
            <fileset dir="${src.dir}/${os.family}/generic">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Install composer                                                     -->
    <!-- ==================================================================== -->
    <target name="install-composer" description="Install composer.">
        <!-- download and install composer -->
        <get src="${composer.download.url}" dest="${target.dir}/installer"/>
        <exec dir="${target.dir}" executable="${target.dir}/appserver/php/php">
            <arg line="installer -- --install-dir ${target.dir}/appserver/php"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPUnit integration tests                                   -->
    <!-- ==================================================================== -->
    <target name="run-integration-tests" description="Runs the PHPUnit integration tests.">
        <!-- install the build utilities (PHPUnit etc.) -->
        <exec dir="${basedir}" executable="${target.dir}/appserver/php/php">
            <arg line="${target.dir}/appserver/php/composer.phar install"/>
        </exec> 
        <!-- execute the integration tests for the runtime -->
        <exec executable="${basedir}/vendor/bin/phpunit.bat" dir="${basedir}" failonerror="true">
            <arg line="--bootstrap bootstrap.php --configuration phpunit.xml" />
        </exec>
        <!-- exectue PHP unit tests here -->
    </target>
    
</project>