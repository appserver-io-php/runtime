#!/bin/bash

### BEGIN INIT INFO
# Provides:          appserver deployment scanner
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts/stops appserver deployment scanner
# Description:       control script for the appserver deployment scanner using /etc/init.d/functions
### END INIT INFO

# Define constants holding our execution setup
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
BASE_PATH='/opt/appserver'
DAEMON="${BASE_PATH}/bin/php"
DAEMON_OPTS="-dappserver.php_sapi=appserver -dappserver.remove_functions=putenv,getenv ${BASE_PATH}/server.php -w"
NAME="appserver-watcher"
DESC="Deployment Scanner"
PIDFILE="/var/run/${NAME}.pid"
LOCKFILE="/var/lock/subsys/${NAME}"

# Include the functions file as we need it for the "killproc" command
. /etc/init.d/functions

# Start script is implemented manually as we had problems with the "daemon" command
# @TODO switch to "daemon" command for a unified look and feel
start() {
    # Do nothing if there already is a pid or lock file
    if ([ -f $PIDFILE -o -f LOCKFILE ]) then

        echo -n "Process seems to run already...";
        echo_failure
        echo
        return 1
    fi

    # Start the server as daemon
    printf "%-50s" "Starting $NAME..."
    cd $BASE_PATH
	$DAEMON $DAEMON_OPTS &
	PID=$!

    # Did we get something useful?
    if ([ -z $PID ]) then
        echo -n "Process running but missing pid...";
        echo_failure
        echo
        return 1
    fi

    echo_success
    echo
	touch $LOCKFILE && echo $PID > $PIDFILE
	return 0
}

stop() {
    printf "%-50s" "Stopping $NAME..."
    killproc $NAME
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && rm -f $PIDFILE && rm -f $LOCKFILE
    return $RETVAL
}

case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  restart|force-reload)
	stop
	start
	;;
  status)
    status $NAME
	;;
  *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|restart|force-reload|status}" >&2
	exit 1
	;;
esac

exit 0
