<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-php/runtime-unix" basedir=".">

    <!-- ==================================================================== -->
    <!-- Load the environment variables into our properties                   -->
    <!-- ==================================================================== -->
    <property environment="env" />

    <!-- ==================================================================== -->
    <!-- Import the build.xml files, defined by os.distribution property      -->
    <!-- ==================================================================== -->
    <import file="${basedir}/buildfiles/${os.family}/${os.distribution}/build.xml" />

    <!-- ==================================================================== -->
    <!-- Load the default properties after loading default properties of the  -->
    <!-- os.distribution. This allows recursive overriding of default         -->
	<!-- properties.                                                          -->
    <!-- ==================================================================== -->
    <property file="${basedir}/buildfiles/${os.family}/build.default.properties" />

    <!-- ==================================================================== -->
    <!-- Copies any built package to the snapshot hosting server.             -->
    <!-- ==================================================================== -->
    <target name="copy-to-hub" description="Copies any built package to the snapshot hosting server.">
    	<echo message="Now try to upload ${package.specific-dir}${package.name} to snapshot server"/>
    	<exec executable="scp" failonerror="true">
            <arg line="-o StrictHostKeyChecking=no -i ${user.home}/.ssh/id_rsa ${package.specific-dir}${package.name} ${hub.scp-user}@${hub.address}:${hub.snapshot-path}"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PHP source package has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-php-src-present" description="Check if PHP Source Package has been downloaded yet.">
        <available file="${lib.dir}/php-${runtime.php.version}.tar.gz" property="php-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL memcached sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-memcached-src-present" description="Check if PECL memcached sources has been downloaded yet.">
        <available file="${lib.dir}/memcached-${runtime.memcached.version}.tgz" property="memcached-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL pthreads sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-pthreads-src-present" description="Check if PECL pthreads sources has been downloaded yet.">
        <available file="${lib.dir}/pthreads-${runtime.pthreads.version}.tgz" property="pthreads-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL apcu sources has been downloaded yet               -->
    <!-- ==================================================================== -->
    <target name="check-apcu-src-present" description="Check if PECL apcu sources has been downloaded yet.">
        <available file="${lib.dir}/apcu-${runtime.apcu.version}.tgz" property="apcu-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL redis sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-redis-src-present" description="Check if PECL redis sources has been downloaded yet.">
        <available file="${lib.dir}/redis-${runtime.redis.version}.tgz" property="redis-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL xdebug sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-xdebug-src-present" description="Check if PECL xdebug sources has been downloaded yet.">
        <available file="${lib.dir}/xdebug-${runtime.xdebug.version}.tgz" property="xdebug-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL libevent sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-libevent-src-present" description="Check if PECL libevent sources has been downloaded yet.">
        <available file="${lib.dir}/libevent-${runtime.libevent.version}.tgz" property="libevent-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL libev sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libev-src-present" description="Check if PECL libev sources has been downloaded yet.">
        <available file="${lib.dir}/libev-${runtime.libev.version}.zip" property="libev-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL ev sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-ev-src-present" description="Check if PECL ev sources has been downloaded yet.">
        <available file="${lib.dir}/ev-${runtime.ev.version}.zip" property="ev-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL event sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-event-src-present" description="Check if PECL event sources has been downloaded yet.">
        <available file="${lib.dir}/event-${runtime.event.version}.zip" property="event-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL operator sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-operator-src-present" description="Check if PECL operator sources has been downloaded yet.">
        <available file="${lib.dir}/operator-${runtime.operator.version}.tgz" property="operator-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL pecl_http sources has been downloaded yet  		 	  -->
    <!-- ==================================================================== -->
    <target name="check-pecl_http-src-present" description="Check if PECL pecl_http sources has been downloaded yet.">
        <available file="${lib.dir}/pecl_http-${runtime.pecl_http.version}.tgz" property="pecl_http-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if ext-appserver sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-ext-appserver-src-present" description="Check if ext appserver sources has been downloaded yet.">
        <available file="${lib.dir}/ext-appserver-${runtime.ext-appserver.version}.tgz" property="ext-appserver-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if PECL AOP sources has been downloaded yet  		 	      -->
    <!-- ==================================================================== -->
    <target name="check-AOP-src-present" description="Check if PECL AOP sources has been downloaded yet.">
        <available file="${lib.dir}/AOP-${runtime.AOP.version}.tgz" property="AOP-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libfreetype sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-libfreetype-src-present" description="Check if libfreetype sources has been downloaded yet.">
        <available file="${lib.dir}/freetype-${libfreetype.version}.tgz" property="libfreetype-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libmemcached sources has been downloaded yet   		 	  -->
    <!-- ==================================================================== -->
    <target name="check-libmemcached-src-present" description="Check if libmemcached sources has been downloaded yet.">
        <available file="${lib.dir}/libmemcached-${libmemcached.version}.tgz" property="libmemcached-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libmcrypt sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libmcrypt-src-present" description="Check if libmcrypt sources has been downloaded yet.">
        <available file="${lib.dir}/libmcrypt-${libmcrypt.version}.tgz" property="libmcrypt-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if readline sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-readline-src-present" description="Check if readline sources has been downloaded yet.">
        <available file="${lib.dir}/readline-${readline.version}.tar.gz" property="readline-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libpng sources has been downloaded yet   		 	          -->
    <!-- ==================================================================== -->
    <target name="check-libpng-src-present" description="Check if libpng sources has been downloaded yet.">
        <available file="${lib.dir}/libpng-${libpng.version}.tgz" property="libpng-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libjpeg sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-libjpeg-src-present" description="Check if libjpeg sources has been downloaded yet.">
        <available file="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz" property="libjpeg-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if pcre sources has been downloaded yet   		 	          -->
    <!-- ==================================================================== -->
    <target name="check-pcre-src-present" description="Check if pcre sources has been downloaded yet.">
        <available file="${lib.dir}/pcre-${pcre.version}.tar.gz" property="pcre-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if libevent library sources has been downloaded yet   		  -->
    <!-- ==================================================================== -->
    <target name="check-libevent-library-src-present" description="Check if libevent library sources has been downloaded yet.">
        <available file="${lib.dir}/libevent-${libevent.version}.tar.gz" property="libevent-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if openssl sources has been downloaded yet   		 	      -->
    <!-- ==================================================================== -->
    <target name="check-openssl-src-present" description="Check if openssl sources has been downloaded yet.">
        <available file="${lib.dir}/openssl-${openssl.version}.tar.gz" property="openssl-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Check if icu4c sources has been downloaded yet   		 	          -->
    <!-- ==================================================================== -->
    <target name="check-libicu-src-present" description="Check if icu4c sources has been downloaded yet.">
        <available file="${lib.dir}/icu4c-${libicu.version.major}_${libicu.version.minor}-src.tgz" property="libicu-src.present"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PHP source package by given version number		  		          -->
    <!-- ==================================================================== -->
    <target name="get-php-src" depends="check-php-src-present" unless="php-src.present" description="Get PHP source package by given version number">
        <get src="http://de1.php.net/get/php-${runtime.php.version}.tar.gz/from/this/mirror" dest="${lib.dir}/php-${runtime.php.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL memcached source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-memcached-src" depends="check-memcached-src-present" unless="memcached-src.present" description="Get PECL memcached source package by given version number">
        <get src="http://pecl.php.net/get/memcached-${runtime.memcached.version}.tgz" dest="${lib.dir}/memcached-${runtime.memcached.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL pthreads source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-pthreads-src" depends="check-pthreads-src-present" unless="pthreads-src.present" description="Get PECL pthreads source package by given version number">
        <get src="https://github.com/appserver-io/pthreads/archive/v${runtime.pthreads.version}.tar.gz" dest="${lib.dir}/pthreads-${runtime.pthreads.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL apcu source package by given version number                 -->
    <!-- ==================================================================== -->
    <target name="get-apcu-src" depends="check-apcu-src-present" unless="apcu-src.present" description="Get PECL apcu source package by given version number">
        <get src="http://pecl.php.net/get/apcu-${runtime.apcu.version}.tgz" dest="${lib.dir}/apcu-${runtime.apcu.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL redis source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-redis-src" depends="check-redis-src-present" unless="redis-src.present" description="Get PECL redis source package by given version number">
        <get src="http://pecl.php.net/get/redis-${runtime.redis.version}.tgz" dest="${lib.dir}/redis-${runtime.redis.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL libevent source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-libevent-src" depends="check-libevent-src-present" unless="libevent-src.present" description="Get PECL libevent source package by given version number">
        <get src="http://pecl.php.net/get/libevent-${runtime.libevent.version}.tgz" dest="${lib.dir}/libevent-${runtime.libevent.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL ev source package by given version number		              -->
    <!-- ==================================================================== -->
    <target name="get-ev-src" depends="check-ev-src-present" unless="ev-src.present" description="Get PECL ev source package by given version number">
        <get src="http://pecl.php.net/get/ev-${runtime.ev.version}.tgz" dest="${lib.dir}/ev-${runtime.ev.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL event source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-event-src" depends="check-event-src-present" unless="event-src.present" description="Get PECL event source package by given version number">
        <get src="http://pecl.php.net/get/event-${runtime.event.version}.tgz" dest="${lib.dir}/event-${runtime.event.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL libev source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-libev-src" depends="check-libev-src-present" unless="libev-src.present" description="Get PECL libev source package by given version number">
        <get src="https://github.com/whatthejeff/php-libev/archive/${runtime.libev.version}.zip" dest="${lib.dir}/libev-${runtime.libev.version}.zip" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL operator source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-operator-src" depends="check-operator-src-present" unless="operator-src.present" description="Get PECL operator source package by given version number">
        <get src="http://pecl.php.net/get/operator-${runtime.operator.version}.tgz" dest="${lib.dir}/operator-${runtime.operator.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL pecl_http source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-pecl_http-src" depends="check-pecl_http-src-present" unless="pecl_http-src.present" description="Get PECL pecl_http source package by given version number">
        <get src="http://pecl.php.net/get/pecl_http-${runtime.pecl_http.version}.tgz" dest="${lib.dir}/pecl_http-${runtime.pecl_http.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL AOP source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-AOP-src" depends="check-AOP-src-present" unless="AOP-src.present" description="Get PECL AOP source package by given version number">
        <get src="http://pecl.php.net/get/AOP-${runtime.AOP.version}.tgz" dest="${lib.dir}/AOP-${runtime.AOP.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL xdebug source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-xdebug-src" depends="check-xdebug-src-present" unless="xdebug-src.present" description="Get PECL xdebug source package by given version number">
        <get src="http://pecl.php.net/get/xdebug-${runtime.xdebug.version}.tgz" dest="${lib.dir}/xdebug-${runtime.xdebug.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get PECL appserver source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-ext-appserver-src" depends="check-ext-appserver-src-present" unless="ext-appserver-src.present" description="Get php ext appserver source package by given version number">
        <get src="https://github.com/appserver-io-php/php-ext-appserver/releases/download/v${runtime.ext-appserver.version}-beta/appserver-${runtime.ext-appserver.version}.tgz" dest="${lib.dir}/ext-appserver-${runtime.ext-appserver.version}.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libfreetype source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libfreetype-src" depends="check-libfreetype-src-present" unless="libfreetype-src.present" description="Get libfreetype source package by given version number.">
        <get src="${libfreetype.download.url}" dest="${lib.dir}/freetype-${libfreetype.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libmemcached source package by given version number		      -->
    <!-- ==================================================================== -->
    <target name="get-libmemcached-src" depends="check-libmemcached-src-present" unless="libmemcached-src.present" description="Get libmemcached source package by given version number.">
        <get src="${libmemcached.download.url}" dest="${lib.dir}/libmemcached-${libmemcached.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libmcrypt source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libmcrypt-src" depends="check-libmcrypt-src-present" unless="libmcrypt-src.present" description="Get libmcrypt source package by given version number.">
        <get src="${libmcrypt.download.url}" dest="${lib.dir}/libmcrypt-${libmcrypt.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get readline source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-readline-src" depends="check-readline-src-present" unless="readline-src.present" description="Get readline source package by given version number.">
        <get src="${readline.download.url}" dest="${lib.dir}/readline-${readline.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libpng source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libpng-src" depends="check-libpng-src-present" unless="libpng-src.present" description="Get libpng source package by given version number.">
        <get src="${libpng.download.url}" dest="${lib.dir}/libpng-${libpng.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libjpeg source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libjpeg-src" depends="check-libjpeg-src-present" unless="libjpeg-src.present" description="Get libjpeg source package by given version number.">
        <get src="${libjpeg.download.url}" dest="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get libevent source package by given version number		  -->
    <!-- ==================================================================== -->
    <target name="get-libevent-library-src" depends="check-libevent-library-src-present" unless="libevent-library-src.present" description="Get libevent source package by given version number.">
        <get src="${libevent.download.url}" dest="${lib.dir}/libevent-${libevent.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get pcre source package by given version number		              -->
    <!-- ==================================================================== -->
    <target name="get-pcre-src" depends="check-pcre-src-present" unless="pcre-src.present" description="Get pcre source package by given version number.">
        <get src="${pcre.download.url}" dest="${lib.dir}/pcre-${pcre.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get openssl source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-openssl-src" depends="check-openssl-src-present" unless="openssl-src.present" description="Get openssl source package by given version number.">
        <get src="${openssl.download.url}" dest="${lib.dir}/openssl-${openssl.version}.tar.gz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Get icu4c source package by given version number		          -->
    <!-- ==================================================================== -->
    <target name="get-libicu-src" depends="check-libicu-src-present" unless="libicu-src.present" description="Get icu4c source package by given version number.">
        <get src="${libicu.download.url}" dest="${lib.dir}/icu4c-${libicu.version.major}_${libicu.version.minor}-src.tgz" usetimestamp="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PHP sources for the runtime                             -->
    <!-- ==================================================================== -->
    <target name="prepare-source" description="Prepares the PHP sources for the runtime.">
        <!-- load the PHP source -->
        <antcall target="get-php-src"/>
        <!-- Untar the PHP source into the build environment -->
        <untar src="${lib.dir}/php-${runtime.php.version}.tar.gz" dest="${target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${target.dir}/php-${runtime.php.version}/build" includes="**/*"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the PECL sources for static compilation (not active!!)      -->
    <!-- ==================================================================== -->
    <target name="prepare-pecl-extension" description="Prepares the PECL sources for static compilation (not active!!)">
        <!-- prepare php ext appserver sources sources for static compilation -->
        <antcall target="get-ext-appserver-src"/>
        <untar src="${lib.dir}/ext-appserver-${runtime.ext-appserver.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <move todir="${target.dir}/php-${runtime.php.version}/ext/appserver">
            <fileset dir="${target.dir}/appserver-${runtime.ext-appserver.version}"/>
        </move>
        <!-- prepare PECL memcached sources sources for static compilation -->
        <antcall target="get-memcached-src"/>
        <untar src="${lib.dir}/memcached-${runtime.memcached.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <move todir="${target.dir}/php-${runtime.php.version}/ext/memcached">
            <fileset dir="${target.dir}/memcached-${runtime.memcached.version}"/>
        </move>
        <!-- prepare PECL pthread sources for static compilation -->
        <antcall target="get-pthreads-src"/>
        <untar src="${lib.dir}/pthreads-${runtime.pthreads.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <move todir="${target.dir}/php-${runtime.php.version}/ext/pthreads">
            <fileset dir="${target.dir}/pthreads-${runtime.pthreads.version}"/>
        </move>
        <!-- prepare PECL apcu sources for static compilation -->
        <antcall target="get-apcu-src"/>
        <untar src="${lib.dir}/apcu-${runtime.apcu.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <move todir="${target.dir}/php-${runtime.php.version}/ext/apcu">
            <fileset dir="${target.dir}/apcu-${runtime.apcu.version}"/>
        </move>
        <!-- prepare PECL operator sources for static compilation -->
        <antcall target="get-operator-src"/>
        <untar src="${lib.dir}/operator-${runtime.operator.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <move todir="${target.dir}/php-${runtime.php.version}/ext/operator">
            <fileset dir="${target.dir}/operator-${runtime.operator.version}"/>
        </move>
        <!-- prepare PECL pecl_http sources for static compilation -->
        <antcall target="get-pecl_http-src"/>
        <untar src="${lib.dir}/pecl_http-${runtime.pecl_http.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <move todir="${target.dir}/php-${runtime.php.version}/ext/http">
            <fileset dir="${target.dir}/pecl_http-${runtime.pecl_http.version}"/>
        </move>
        <!-- prepare PECL AOP sources for static compilation -->
        <antcall target="get-AOP-src"/>
        <untar src="${lib.dir}/AOP-${runtime.AOP.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <move todir="${target.dir}/php-${runtime.php.version}/ext/AOP">
            <fileset dir="${target.dir}/AOP-${runtime.AOP.version}"/>
        </move>
        <!-- prepare PECL libevent sources for static compilation -->
        <antcall target="get-libevent-src"/>
        <untar src="${lib.dir}/libevent-${runtime.libevent.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <move todir="${target.dir}/php-${runtime.php.version}/ext/libevent">
            <fileset dir="${target.dir}/libevent-${runtime.libevent.version}"/>
        </move>
        <!-- prepare PECL redis sources for static compilation -->
        <antcall target="get-redis-src"/>
        <untar src="${lib.dir}/redis-${runtime.redis.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <move todir="${target.dir}/php-${runtime.php.version}/ext/redis">
            <fileset dir="${target.dir}/redis-${runtime.redis.version}"/>
        </move>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libjpeg sources for the runtime                         -->
    <!-- ==================================================================== -->
    <target name="build-libjpeg" if="${libjpeg.build}" description="Prepares the libjpeg sources for the runtime.">
        <antcall target="get-libjpeg-src"/>
        <untar src="${lib.dir}/jpegsrc.v${libjpeg.version}.tar.gz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/jpeg-${libjpeg.version}" executable="sh">
            <env key="CC" value="${libjpeg.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${runtime.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${target.dir}/jpeg-${libjpeg.version}" includes="install-sh"/>
        <exec dir="${target.dir}/jpeg-${libjpeg.version}" executable="make"/>
        <exec dir="${target.dir}/jpeg-${libjpeg.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libpng sources for the runtime                          -->
    <!-- ==================================================================== -->
    <target name="build-libpng" if="${libpng.build}" description="Prepares the libpng sources for the runtime.">
        <antcall target="get-libpng-src"/>
        <untar src="${lib.dir}/libpng-${libpng.version}.tar.gz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/libpng-${libpng.version}" executable="sh">
            <env key="CC" value="${libpng.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${runtime.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${target.dir}/libpng-${libpng.version}" includes="install-sh"/>
        <exec dir="${target.dir}/libpng-${libpng.version}" executable="make"/>
        <exec dir="${target.dir}/libpng-${libpng.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libfreetype sources for the runtime                     -->
    <!-- ==================================================================== -->
    <target name="build-libfreetype" if="${libfreetype.build}" description="Prepares the libfreetype sources for the runtime.">
        <antcall target="get-libfreetype-src"/>
        <untar src="${lib.dir}/freetype-${libfreetype.version}.tar.gz" dest="${target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${target.dir}/freetype-${libfreetype.version}/builds" includes="**/*"/>
        <exec dir="${target.dir}/freetype-${libfreetype.version}" executable="sh">
            <env key="CC" value="${libfreetype.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${runtime.compile.prefix}"/>
        </exec>
        <exec dir="${target.dir}/freetype-${libfreetype.version}" executable="make"/>
        <exec dir="${target.dir}/freetype-${libfreetype.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libmemcached sources for the runtime                    -->
    <!-- ==================================================================== -->
    <target name="build-libmemcached" if="${libmemcached.build}" description="Prepares the libmemcached sources for the runtime.">
        <antcall target="get-libmemcached-src"/>
        <untar src="${lib.dir}/libmemcached-${libmemcached.version}.tar.gz" dest="${target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${target.dir}/libmemcached-${libmemcached.version}/build-aux" includes="**/*"/>
        <exec dir="${target.dir}/libmemcached-${libmemcached.version}" executable="sh">
            <env key="CC" value="${libmemcached.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${runtime.compile.prefix}"/>
        </exec>
        <exec dir="${target.dir}/libmemcached-${libmemcached.version}" executable="make"/>
        <exec dir="${target.dir}/libmemcached-${libmemcached.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libmcrypt sources for the runtime                       -->
    <!-- ==================================================================== -->
    <target name="build-libmcrypt" if="${libmcrypt.build}" description="Prepares the libmcrypt sources for the runtime.">
        <antcall target="get-libmcrypt-src"/>
        <untar src="${lib.dir}/libmcrypt-${libmcrypt.version}.tar.gz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/libmcrypt-${libmcrypt.version}" executable="sh">
            <env key="CC" value="${libmcrypt.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${runtime.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${target.dir}/libmcrypt-${libmcrypt.version}" includes="install-sh"/>
        <exec dir="${target.dir}/libmcrypt-${libmcrypt.version}" executable="make"/>
        <exec dir="${target.dir}/libmcrypt-${libmcrypt.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the readline sources for the runtime                       -->
    <!-- ==================================================================== -->
    <target name="build-readline" if="${readline.build}" description="Prepares the readline sources for the runtime.">
    	<antcall target="get-readline-src"/>
        <untar src="${lib.dir}/readline-${readline.version}.tar.gz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/readline-${readline.version}" executable="sh">
            <env key="CC" value="${readline.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${runtime.compile.prefix}"/>
        </exec>
    	<!-- BUGFIX: http://techdebug.com/blog/2009/01/03/compiling-readline-on-an-osx-105-intel-x86_64/ -->
    	<replace file="${target.dir}/readline-${readline.version}/shlib/Makefile" token="-dynamic" value="-dynamiclib"/>
        <exec dir="${target.dir}/readline-${readline.version}" executable="make"/>
        <exec dir="${target.dir}/readline-${readline.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libevent sources for the runtime                -->
    <!-- ==================================================================== -->
    <target name="build-libevent" if="${libevent.build}" description="Prepares the libevent sources for the runtime.">
        <antcall target="get-libevent-library-src"/>
        <untar src="${lib.dir}/libevent-${libevent.version}.tar.gz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/libevent-${libevent.version}-stable" executable="sh">
            <env key="CC" value="${libevent.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${runtime.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${target.dir}/libevent-${libevent.version}-stable" includes="install-sh"/>
        <exec dir="${target.dir}/libevent-${libevent.version}-stable" executable="make"/>
        <exec dir="${target.dir}/libevent-${libevent.version}-stable" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the pcre sources for the runtime                            -->
    <!-- ==================================================================== -->
    <target name="build-pcre" if="${pcre.build}" description="Prepares the pcre sources for the runtime.">
        <antcall target="get-pcre-src"/>
        <untar src="${lib.dir}/pcre-${pcre.version}.tar.gz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/pcre-${pcre.version}" executable="sh">
            <env key="CC" value="${pcre.cc}"/>
            <arg value="configure"/>
            <arg value="--prefix=${runtime.compile.prefix}"/>
        </exec>
        <chmod perm="755" dir="${target.dir}/pcre-${pcre.version}" includes="install-sh"/>
        <chmod perm="755" dir="${target.dir}/pcre-${pcre.version}" includes="configure"/>
        <exec dir="${target.dir}/pcre-${pcre.version}" executable="make"/>
        <exec dir="${target.dir}/pcre-${pcre.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the openssl sources for the runtime                		  -->
    <!-- ==================================================================== -->
    <target name="build-openssl" if="${openssl.build}" description="Prepares the openssl sources for the runtime.">
        <antcall target="get-openssl-src"/>
        <copy file="${basedir}/buildfiles/${os.family}/scripts/build_openssl_dylib_${os.architecture}.sh" todir="${target.dir}">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <chmod perm="755" file="${target.dir}/build_openssl_dylib_${os.architecture}.sh" />
        <exec dir="${target.dir}" executable="sh">
            <arg value="build_openssl_dylib_${os.architecture}.sh" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the libicu sources for the runtime                          -->
    <!-- ==================================================================== -->
    <target name="build-libicu" if="${libicu.build}" description="Prepares the libicu sources for the runtime.">
        <antcall target="get-libicu-src"/>
        <untar src="${lib.dir}/icu4c-${libicu.version.major}_${libicu.version.minor}-src.tgz" dest="${target.dir}" compression="gzip"/>
        <chmod perm="755" dir="${target.dir}/icu/source" includes="configure,install-sh"/>
        <exec dir="${target.dir}/icu/source" executable="sh">
            <arg value="runConfigureICU"/>
            <arg value="${libicu.target-env}"/>
            <arg value="--prefix=${runtime.compile.prefix}"/>
        </exec>
        <exec dir="${target.dir}/icu/source" executable="make"/>
        <exec dir="${target.dir}/icu/source" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the debian runtime          -->
    <!--                                                                      -->
    <!-- This is a wrapper for all distribution prepare tasks, as they have   -->
    <!-- similar dependencies as the main build-runtime task. So we wrap it   -->
    <!-- away to avoid ant dependency messups.                                -->
    <!-- ==================================================================== -->
    <target name="prepare-linux-build-system" description="Install the necessary libraries to build the needed linux distribution runtime.">
        <antcall target="prepare-distribution-specific-build-system"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies the os.family + os.distribution specific buildfiles           -->
    <!-- into the dist                                                        -->
    <!-- ==================================================================== -->
    <target name="copy-buildfiles" description="Prepares the appserver sources">
        <copy todir="${runtime.compile.prefix}" preservelastmodified="true" overwrite="true">
            <fileset dir="${src.dir}/${os.family}/generic">
                <include name="**/*" />
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <copy todir="${runtime.compile.prefix}" preservelastmodified="true" overwrite="true">
            <fileset dir="${src.dir}/${os.family}/${os.distribution}">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>

    <!-- ==================================================================== -->
    <!-- Install composer                                                     -->
    <!-- ==================================================================== -->
    <target name="install-composer" description="Install composer.">
        <!-- download the composer installer -->
        <exec dir="${target.dir}" executable="curl">
            <arg line="-sS http://getcomposer.org/installer -o installer"/>
        </exec>
        <!-- install composer itself -->
        <exec dir="${target.dir}" executable="${runtime.compile.prefix}/bin/php">
            <arg line="installer -- --install-dir ${runtime.compile.prefix}/bin"/>
        </exec>
    </target>
	
    <!-- ==================================================================== -->
    <!-- Compiles the appserver.io Linux runtime environment                  -->
    <!-- ==================================================================== -->
    <target name="build-runtime" description="Compiles the appserver.io Linux runtime environment.">

    	<!-- prepare the local build environment -->
    	<antcall target="prepare" />
    	
    	<!-- prepare the Linux build environment -->
    	<antcall target="prepare-linux-build-system" />
    	
    	<!-- prepare the PHP source -->
    	<antcall target="prepare-source"/>
    	
        <!-- delete the application server directory -->
        <delete dir="${runtime.compile.prefix}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>

        <!-- build the necessary libraries -->
    	<antcall target="build-libjpeg"/>
        <antcall target="build-libpng"/>
        <antcall target="build-libfreetype"/>
        <antcall target="build-libmemcached"/>
        <antcall target="build-libmcrypt"/>
        <antcall target="build-readline"/>
        <antcall target="build-libevent"/>
        <antcall target="build-openssl"/>
        <antcall target="build-pcre"/>
        <antcall target="build-libicu"/>

    	<!-- prepare the PECL extensions -->
        <antcall target="prepare-pecl-extension"/>

        <!-- compile the PHP sources and PECL extensions static -->
        <exec dir="${target.dir}/php-${runtime.php.version}" executable="make">
            <arg value="clean"/>
        </exec>
        <delete file="${target.dir}/php-${runtime.php.version}/aclocal.m4"/>
        <exec dir="${target.dir}/php-${runtime.php.version}" executable="sh">
            <arg value="buildconf"/>
            <arg line="--force"/>
        </exec>

    	<!-- log PHP compile configuration -->
    	<echo message="Now compiling PHP using configure params: ${runtime.compile.configuration}"/>

    	<!-- configure, compile and install PHP binary -->
        <exec dir="${target.dir}/php-${runtime.php.version}" executable="sh">
            <env key="CC" value="${runtime.cc}"/>
            <env key="EXTRA_LIBS" value="-llber"/>
            <arg line="configure ${runtime.compile.configuration}"/>
        </exec>
        <exec dir="${target.dir}/php-${runtime.php.version}" executable="make">
            <arg value="-j8"/>
        </exec>
        <exec dir="${target.dir}/php-${runtime.php.version}" executable="make">
            <arg value="install"/>
        </exec>

        <!-- build the PECL package's as shared library -->
        <antcall target="pecl-build-pthreads"/>
        <antcall target="pecl-build-memcached"/>
        <antcall target="pecl-build-redis"/>
        <antcall target="pecl-build-appserver"/>
        <antcall target="pecl-build-apcu"/>
        <antcall target="pecl-build-ev"/>
        <antcall target="pecl-build-event"/>
        <antcall target="pecl-build-xdebug"/>
        
        <!-- copy runtime files from src directory -->
        <antcall target="copy-buildfiles"/>

    	<!-- installs the Composer dependency manager -->
    	<antcall target="install-composer"/>
    	
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL pthreads as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-pthreads" description="Builds the PECL pthreads as shared extension.">
        <antcall target="get-pthreads-src"/>
        <untar src="${lib.dir}/pthreads-${runtime.pthreads.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/pthreads-${runtime.pthreads.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/pthreads-${runtime.pthreads.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${target.dir}/pthreads-${runtime.pthreads.version}" executable="make"/>
        <exec dir="${target.dir}/pthreads-${runtime.pthreads.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL apcu as shared extension                             -->
    <!-- ==================================================================== -->
    <target name="pecl-build-apcu" description="Builds the PECL apcu as shared extension.">
        <antcall target="get-apcu-src"/>
        <untar src="${lib.dir}/apcu-${runtime.apcu.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/apcu-${runtime.apcu.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/apcu-${runtime.apcu.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${target.dir}/apcu-${runtime.apcu.version}" executable="make"/>
        <exec dir="${target.dir}/apcu-${runtime.apcu.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL memcached as shared extension                        -->
    <!-- ==================================================================== -->
    <target name="pecl-build-memcached" description="Builds the PECL memcached as shared extension.">
        <antcall target="get-memcached-src"/>
        <untar src="${lib.dir}/memcached-${runtime.memcached.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/memcached-${runtime.memcached.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/memcached-${runtime.memcached.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
            <arg value="--with-libmemcached-dir=${libmemcached.dir}"/>
        </exec>
        <exec dir="${target.dir}/memcached-${runtime.memcached.version}" executable="make"/>
        <exec dir="${target.dir}/memcached-${runtime.memcached.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL operator as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-operator" description="Builds the PECL operator as shared extension.">
        <antcall target="get-operator-src"/>
        <untar src="${lib.dir}/operator-${runtime.operator.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/operator-${runtime.operator.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/operator-${runtime.operator.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${target.dir}/operator-${runtime.operator.version}" executable="make"/>
        <exec dir="${target.dir}/operator-${runtime.operator.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL pecl_http as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-pecl_http" description="Builds the PECL pecl_http as shared extension.">
        <antcall target="get-pecl_http-src"/>
        <untar src="${lib.dir}/pecl_http-${runtime.pecl_http.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/pecl_http-${runtime.pecl_http.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/pecl_http-${runtime.pecl_http.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${target.dir}/pecl_http-${runtime.pecl_http.version}" executable="make"/>
        <exec dir="${target.dir}/pecl_http-${runtime.pecl_http.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL libevent as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-libevent" description="Builds the PECL libevent as shared extension.">
        <antcall target="get-libevent-src"/>
        <untar src="${lib.dir}/libevent-${runtime.libevent.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/libevent-${runtime.libevent.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/libevent-${runtime.libevent.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
            <arg value="--with-libevent=${runtime.compile.libevent.libdir}"/>
        </exec>
        <exec dir="${target.dir}/libevent-${runtime.libevent.version}" executable="make"/>
        <exec dir="${target.dir}/libevent-${runtime.libevent.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL libev as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-libev" description="Builds the PECL libev as shared extension.">
        <antcall target="get-libev-src"/>
        <unzip src="${lib.dir}/libev-${runtime.libev.version}.zip" dest="${target.dir}"/>
        <exec dir="${target.dir}/php-libev-${runtime.libev.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/php-libev-${runtime.libev.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${target.dir}/php-libev-${runtime.libev.version}" executable="make"/>
        <exec dir="${target.dir}/php-libev-${runtime.libev.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL event as shared extension                            -->
    <!-- ==================================================================== -->
    <target name="pecl-build-event" description="Builds the PECL event as shared extension.">
        <antcall target="get-event-src"/>
        <untar src="${lib.dir}/event-${runtime.event.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/event-${runtime.event.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/event-${runtime.event.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        	<arg value="--with-event-libevent-dir=${runtime.compile.prefix}"/>
        </exec>
        <exec dir="${target.dir}/event-${runtime.event.version}" executable="make"/>
        <exec dir="${target.dir}/event-${runtime.event.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL ev as shared extension                               -->
    <!-- ==================================================================== -->
    <target name="pecl-build-ev" description="Builds the PECL ev as shared extension.">
        <antcall target="get-ev-src"/>
        <untar src="${lib.dir}/ev-${runtime.ev.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/ev-${runtime.ev.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/ev-${runtime.ev.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${target.dir}/ev-${runtime.ev.version}" executable="make"/>
        <exec dir="${target.dir}/ev-${runtime.ev.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL AOP as shared extension                         -->
    <!-- ==================================================================== -->
    <target name="pecl-build-AOP" description="Builds the PECL AOP as shared extension.">
        <antcall target="get-AOP-src"/>
        <untar src="${lib.dir}/AOP-${runtime.AOP.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/AOP-${runtime.AOP.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/AOP-${runtime.AOP.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${target.dir}/AOP-${runtime.AOP.version}" executable="make"/>
        <exec dir="${target.dir}/AOP-${runtime.AOP.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL xdebug as shared extension                           -->
    <!-- ==================================================================== -->
    <target name="pecl-build-xdebug" description="Builds the PECL xdebug as shared extension.">
        <antcall target="get-xdebug-src"/>
        <untar src="${lib.dir}/xdebug-${runtime.xdebug.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/xdebug-${runtime.xdebug.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/xdebug-${runtime.xdebug.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${target.dir}/xdebug-${runtime.xdebug.version}" executable="make"/>
        <exec dir="${target.dir}/xdebug-${runtime.xdebug.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL redis as shared extension                            -->
    <!-- ==================================================================== -->
    <target name="pecl-build-redis" description="Builds the PECL redis as shared extension.">
        <antcall target="get-redis-src"/>
        <untar src="${lib.dir}/redis-${runtime.redis.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/redis-${runtime.redis.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/redis-${runtime.redis.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${target.dir}/redis-${runtime.redis.version}" executable="make"/>
        <exec dir="${target.dir}/redis-${runtime.redis.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Builds the PECL appserver as shared extension                        -->
    <!-- ==================================================================== -->
    <target name="pecl-build-appserver" description="Builds the PECL appserver as shared extension.">
        <antcall target="get-ext-appserver-src"/>
        <untar src="${lib.dir}/ext-appserver-${runtime.ext-appserver.version}.tgz" dest="${target.dir}" compression="gzip"/>
        <exec dir="${target.dir}/appserver-${runtime.ext-appserver.version}" executable="${runtime.compile.prefix}/bin/phpize"/>
        <exec dir="${target.dir}/appserver-${runtime.ext-appserver.version}" executable="sh">
            <arg value="configure"/>
            <arg value="--with-php-config=${runtime.compile.prefix}/bin/php-config"/>
        </exec>
        <exec dir="${target.dir}/appserver-${runtime.ext-appserver.version}" executable="make"/>
        <exec dir="${target.dir}/appserver-${runtime.ext-appserver.version}" executable="make">
            <arg value="install"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Copy build files to target directory                                 -->
    <!-- ==================================================================== -->
    <target name="move-build-to-target" description="Copies build files to target directory.">
        <mkdir dir="${target.dir}/re/opt" />
        <exec dir="${target.dir}" executable="mv">
            <arg value="${runtime.compile.prefix}"/>
            <arg value="${target.dir}/re/opt"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates the .tgz package file                                        -->
    <!-- ==================================================================== -->
    <target name="create-package" description="Creates the .tgz package file">
        <!-- move the buildfiles to the target -->
        <antcall target="move-build-to-target" />
        <!-- create the .tgz package file -->
        <exec dir="${target.dir}/re/opt" executable="tar">
            <arg line="-pcvzf ${package.specific-dir}${package.name} appserver"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Runs the PHPUnit integration tests                                   -->
    <!-- ==================================================================== -->
    <target name="run-integration-tests" description="Runs the PHPUnit integration tests.">
        <!-- install the build utilities (PHPUnit etc.) -->
        <exec dir="${basedir}" executable="${runtime.compile.prefix}/bin/php">
            <arg line="${runtime.compile.prefix}/bin/composer.phar install"/>
        </exec>
        <!-- execute the integration tests for the runtime -->
        <exec executable="${runtime.compile.prefix}/bin/php" dir="${basedir}" failonerror="true">
            <arg line="${basedir}/vendor/bin/phpunit --bootstrap bootstrap.php --configuration phpunit.xml" />
        </exec>
        <!-- exectue PHP unit tests here -->
    </target>

</project>
