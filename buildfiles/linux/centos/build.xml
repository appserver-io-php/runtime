<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-php/runtime-linux-centos" basedir=".">

    <!-- ==================================================================== -->
    <!-- Load the environment variables into our properties                   -->
    <!-- ==================================================================== -->
    <property environment="env" />

    <!-- ==================================================================== -->
    <!-- Load the default properties. This allows recursive overriding of     -->
    <!-- default properties.                                                  -->
    <!-- ==================================================================== -->
    <property file="${basedir}/buildfiles/${os.family}/${os.distribution}/${target-os.major.version}/build.default.properties"/>
    <property file="${basedir}/buildfiles/${os.family}/${os.distribution}/generic/build.default.properties"/>

    <!-- ==================================================================== -->
    <!-- Install the necessary libraries to build the centos runtime          -->
    <!-- ==================================================================== -->
    <target name="prepare-distribution-specific-build-system" description="Install the necessary libraries to build the centos runtime.">
        <exec executable="yum" inputstring="Y">
            <arg value="install"/>
            <arg value="autoconf"/>
            <arg value="curl"/>
            <arg value="bison"/>
            <arg value="libxml2"/>
            <arg value="libxml2-devel"/>
            <arg value="openssl-devel"/>
            <arg value="bzip2-devel"/>
            <arg value="libjpeg-turbo-devel"/>
            <arg value="libpng-devel"/>
            <arg value="freetype-devel"/>
            <arg value="libmcrypt-devel"/>
            <arg value="libXpm-devel"/>
            <arg value="pcre-devel"/>
            <arg value="libpng-devel"/>
            <arg value="libcurl-devel"/>
            <arg value="libevent-devel"/>
            <arg value="gcc-c++"/>
            <arg value="openldap-devel"/>
            <arg value="rpm-build"/>
            <arg value="libicu-devel"/>
            <arg value="libxslt-devel"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates all RPM packages within an existing vagrant box              -->
    <!-- ==================================================================== -->
    <target name="vagrant-build">
        <!-- map the vagrant name according to the expected environment -->
        <property name="vagrant-box.name" value="${vagrant-box.prefix}Build" />
        <!-- invoke original build target within vagrant box -->
        <exec dir="${temp.dir}" executable="sh" errorproperty="build.failed">
            <arg value="-c" />
            <arg value='vagrant ssh-config | ssh -F /dev/stdin ${vagrant-box.name} "sudo ant local-build -buildfile ${vagrant.basedir}/build.xml -Dtarget.dir=/tmp/target -Dbuild.number=${build.number} -Dtarget-os.major.version=${target-os.major.version} -Dtarget-os.minor.version=${target-os.minor.version} -Dos.family=${os.family} -Dos.distribution=${os.distribution} -Dos.architecture=${os.architecture}"' />
        </exec>
        <!-- eliminate the possiblity of empty but existing error output -->
        <property name="build.failed" value=""/>
        <condition property="fatal-error.occured" value="${build.failed}">
            <not>
                <equals arg1="${build.failed}" arg2=""/>
            </not>
        </condition>
        <!-- check for a specific build failure and make an emergency destroy -->
        <antcall target="destroy-vagrant-box-on-error" />
        <!-- tell them about any failures we might encountered -->
        <fail if="fatal-error.occured" message="The build failed with message '${fatal-error.occured}', see log above." />
    </target>

</project>
